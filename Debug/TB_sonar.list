
TB_sonar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004418  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080045b8  080045b8  000055b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004618  08004618  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004618  08004618  00005618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004620  08004620  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004620  08004620  00005620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004624  08004624  00005624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004628  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000068  08004690  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004690  0000628c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d381  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e27  00000000  00000000  00013419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00015240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009bf  00000000  00000000  00015ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017267  00000000  00000000  0001687f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddec  00000000  00000000  0002dae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fec6  00000000  00000000  0003b8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb798  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bc4  00000000  00000000  000cb7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000cf3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080045a0 	.word	0x080045a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080045a0 	.word	0x080045a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char* ptr, int len) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == 1 || fd == 2) {
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d002      	beq.n	80005c4 <_write+0x18>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d111      	bne.n	80005e8 <_write+0x3c>
	hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295
 80005cc:	68b9      	ldr	r1, [r7, #8]
 80005ce:	4809      	ldr	r0, [pc, #36]	@ (80005f4 <_write+0x48>)
 80005d0:	f002 fcfc 	bl	8002fcc <HAL_UART_Transmit>
 80005d4:	4603      	mov	r3, r0
 80005d6:	75fb      	strb	r3, [r7, #23]
	if (hstatus == HAL_OK)
 80005d8:	7dfb      	ldrb	r3, [r7, #23]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d101      	bne.n	80005e2 <_write+0x36>
	  return len;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	e004      	b.n	80005ec <_write+0x40>
	else
	  return -1;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	e001      	b.n	80005ec <_write+0x40>
  }
  return -1;
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200000cc 	.word	0x200000cc

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 fd66 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f82c 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 f92c 	bl	8000860 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000608:	f000 f890 	bl	800072c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800060c:	f000 f8fe 	bl	800080c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  sr04.trig_port = GPIOB;
 8000610:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <main+0x54>)
 8000612:	4a0f      	ldr	r2, [pc, #60]	@ (8000650 <main+0x58>)
 8000614:	601a      	str	r2, [r3, #0]
  sr04.trig_pin = GPIO_PIN_14;
 8000616:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <main+0x54>)
 8000618:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800061c:	809a      	strh	r2, [r3, #4]
  sr04.echo_htim = &htim2;
 800061e:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <main+0x54>)
 8000620:	4a0c      	ldr	r2, [pc, #48]	@ (8000654 <main+0x5c>)
 8000622:	609a      	str	r2, [r3, #8]
  sr04.echo_channel = TIM_CHANNEL_1;
 8000624:	4b09      	ldr	r3, [pc, #36]	@ (800064c <main+0x54>)
 8000626:	2200      	movs	r2, #0
 8000628:	819a      	strh	r2, [r3, #12]
  sr04_init(&sr04);
 800062a:	4808      	ldr	r0, [pc, #32]	@ (800064c <main+0x54>)
 800062c:	f000 f996 	bl	800095c <sr04_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
   {
     sr04_trigger(&sr04);
 8000630:	4806      	ldr	r0, [pc, #24]	@ (800064c <main+0x54>)
 8000632:	f000 fa19 	bl	8000a68 <sr04_trigger>
     HAL_Delay(100);
 8000636:	2064      	movs	r0, #100	@ 0x64
 8000638:	f000 fdba 	bl	80011b0 <HAL_Delay>
     printf("Distance: %lu mm\r\n", sr04.distance);
 800063c:	4b03      	ldr	r3, [pc, #12]	@ (800064c <main+0x54>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4619      	mov	r1, r3
 8000642:	4805      	ldr	r0, [pc, #20]	@ (8000658 <main+0x60>)
 8000644:	f003 f940 	bl	80038c8 <iprintf>
     sr04_trigger(&sr04);
 8000648:	bf00      	nop
 800064a:	e7f1      	b.n	8000630 <main+0x38>
 800064c:	20000114 	.word	0x20000114
 8000650:	40020400 	.word	0x40020400
 8000654:	20000084 	.word	0x20000084
 8000658:	080045b8 	.word	0x080045b8

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	@ 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f003 f981 	bl	8003972 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b27      	ldr	r3, [pc, #156]	@ (8000724 <SystemClock_Config+0xc8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a26      	ldr	r2, [pc, #152]	@ (8000724 <SystemClock_Config+0xc8>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b24      	ldr	r3, [pc, #144]	@ (8000724 <SystemClock_Config+0xc8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <SystemClock_Config+0xcc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a20      	ldr	r2, [pc, #128]	@ (8000728 <SystemClock_Config+0xcc>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <SystemClock_Config+0xcc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006cc:	230c      	movs	r3, #12
 80006ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006d0:	2360      	movs	r3, #96	@ 0x60
 80006d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d8:	2304      	movs	r3, #4
 80006da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 f839 	bl	8001758 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 f930 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2103      	movs	r1, #3
 800070c:	4618      	mov	r0, r3
 800070e:	f001 fa9b 	bl	8001c48 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000718:	f000 f91a 	bl	8000950 <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	@ 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	@ 0x28
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000732:	f107 0318 	add.w	r3, r7, #24
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000756:	4b2c      	ldr	r3, [pc, #176]	@ (8000808 <MX_TIM2_Init+0xdc>)
 8000758:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800075c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 800075e:	4b2a      	ldr	r3, [pc, #168]	@ (8000808 <MX_TIM2_Init+0xdc>)
 8000760:	2263      	movs	r2, #99	@ 0x63
 8000762:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b28      	ldr	r3, [pc, #160]	@ (8000808 <MX_TIM2_Init+0xdc>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800076a:	4b27      	ldr	r3, [pc, #156]	@ (8000808 <MX_TIM2_Init+0xdc>)
 800076c:	f04f 32ff 	mov.w	r2, #4294967295
 8000770:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000772:	4b25      	ldr	r3, [pc, #148]	@ (8000808 <MX_TIM2_Init+0xdc>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000778:	4b23      	ldr	r3, [pc, #140]	@ (8000808 <MX_TIM2_Init+0xdc>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800077e:	4822      	ldr	r0, [pc, #136]	@ (8000808 <MX_TIM2_Init+0xdc>)
 8000780:	f001 fc42 	bl	8002008 <HAL_TIM_Base_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800078a:	f000 f8e1 	bl	8000950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000792:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000794:	f107 0318 	add.w	r3, r7, #24
 8000798:	4619      	mov	r1, r3
 800079a:	481b      	ldr	r0, [pc, #108]	@ (8000808 <MX_TIM2_Init+0xdc>)
 800079c:	f001 ffe6 	bl	800276c <HAL_TIM_ConfigClockSource>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007a6:	f000 f8d3 	bl	8000950 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80007aa:	4817      	ldr	r0, [pc, #92]	@ (8000808 <MX_TIM2_Init+0xdc>)
 80007ac:	f001 fcde 	bl	800216c <HAL_TIM_IC_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007b6:	f000 f8cb 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007c2:	f107 0310 	add.w	r3, r7, #16
 80007c6:	4619      	mov	r1, r3
 80007c8:	480f      	ldr	r0, [pc, #60]	@ (8000808 <MX_TIM2_Init+0xdc>)
 80007ca:	f002 fb2d 	bl	8002e28 <HAL_TIMEx_MasterConfigSynchronization>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80007d4:	f000 f8bc 	bl	8000950 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007d8:	2300      	movs	r3, #0
 80007da:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007dc:	2301      	movs	r3, #1
 80007de:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 80007e4:	2304      	movs	r3, #4
 80007e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	@ (8000808 <MX_TIM2_Init+0xdc>)
 80007f0:	f001 ff20 	bl	8002634 <HAL_TIM_IC_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80007fa:	f000 f8a9 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	@ 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000084 	.word	0x20000084

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	@ (800085c <MX_USART2_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000844:	f002 fb72 	bl	8002f2c <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f87f 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000cc 	.word	0x200000cc
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	@ 0x28
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b32      	ldr	r3, [pc, #200]	@ (8000944 <MX_GPIO_Init+0xe4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a31      	ldr	r2, [pc, #196]	@ (8000944 <MX_GPIO_Init+0xe4>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b2f      	ldr	r3, [pc, #188]	@ (8000944 <MX_GPIO_Init+0xe4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b2b      	ldr	r3, [pc, #172]	@ (8000944 <MX_GPIO_Init+0xe4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a2a      	ldr	r2, [pc, #168]	@ (8000944 <MX_GPIO_Init+0xe4>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b28      	ldr	r3, [pc, #160]	@ (8000944 <MX_GPIO_Init+0xe4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b24      	ldr	r3, [pc, #144]	@ (8000944 <MX_GPIO_Init+0xe4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a23      	ldr	r2, [pc, #140]	@ (8000944 <MX_GPIO_Init+0xe4>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b21      	ldr	r3, [pc, #132]	@ (8000944 <MX_GPIO_Init+0xe4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <MX_GPIO_Init+0xe4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000944 <MX_GPIO_Init+0xe4>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <MX_GPIO_Init+0xe4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ec:	4816      	ldr	r0, [pc, #88]	@ (8000948 <MX_GPIO_Init+0xe8>)
 80008ee:	f000 ff19 	bl	8001724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008f8:	4814      	ldr	r0, [pc, #80]	@ (800094c <MX_GPIO_Init+0xec>)
 80008fa:	f000 ff13 	bl	8001724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	480c      	ldr	r0, [pc, #48]	@ (8000948 <MX_GPIO_Init+0xe8>)
 8000918:	f000 fd80 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 800091c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_GPIO_Init+0xec>)
 8000936:	f000 fd71 	bl	800141c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	@ 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40020800 	.word	0x40020800
 800094c:	40020400 	.word	0x40020400

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <Error_Handler+0x8>

0800095c <sr04_init>:
#include "sr04.h"
#define DISTANCE_LIMIT 5000

void sr04_init(sr04_t *sr04_struct){
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  // Enable trigger pin
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_RESET);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	889b      	ldrh	r3, [r3, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	4619      	mov	r1, r3
 8000970:	f000 fed8 	bl	8001724 <HAL_GPIO_WritePin>
  // Set input capture edge to rising
  __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	899b      	ldrh	r3, [r3, #12]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d10a      	bne.n	8000992 <sr04_init+0x36>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	6a1a      	ldr	r2, [r3, #32]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f022 020a 	bic.w	r2, r2, #10
 800098e:	621a      	str	r2, [r3, #32]
 8000990:	e027      	b.n	80009e2 <sr04_init+0x86>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	899b      	ldrh	r3, [r3, #12]
 8000996:	2b04      	cmp	r3, #4
 8000998:	d10a      	bne.n	80009b0 <sr04_init+0x54>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	6a1b      	ldr	r3, [r3, #32]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	6892      	ldr	r2, [r2, #8]
 80009a6:	6812      	ldr	r2, [r2, #0]
 80009a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80009ac:	6213      	str	r3, [r2, #32]
 80009ae:	e018      	b.n	80009e2 <sr04_init+0x86>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	899b      	ldrh	r3, [r3, #12]
 80009b4:	2b08      	cmp	r3, #8
 80009b6:	d10a      	bne.n	80009ce <sr04_init+0x72>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	6a1b      	ldr	r3, [r3, #32]
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	6892      	ldr	r2, [r2, #8]
 80009c4:	6812      	ldr	r2, [r2, #0]
 80009c6:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80009ca:	6213      	str	r3, [r2, #32]
 80009cc:	e009      	b.n	80009e2 <sr04_init+0x86>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	6a1b      	ldr	r3, [r3, #32]
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	6892      	ldr	r2, [r2, #8]
 80009da:	6812      	ldr	r2, [r2, #0]
 80009dc:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80009e0:	6213      	str	r3, [r2, #32]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	899b      	ldrh	r3, [r3, #12]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d108      	bne.n	80009fc <sr04_init+0xa0>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6a12      	ldr	r2, [r2, #32]
 80009f8:	621a      	str	r2, [r3, #32]
 80009fa:	e021      	b.n	8000a40 <sr04_init+0xe4>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	899b      	ldrh	r3, [r3, #12]
 8000a00:	2b04      	cmp	r3, #4
 8000a02:	d108      	bne.n	8000a16 <sr04_init+0xba>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	6892      	ldr	r2, [r2, #8]
 8000a0e:	6812      	ldr	r2, [r2, #0]
 8000a10:	6a1b      	ldr	r3, [r3, #32]
 8000a12:	6213      	str	r3, [r2, #32]
 8000a14:	e014      	b.n	8000a40 <sr04_init+0xe4>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	899b      	ldrh	r3, [r3, #12]
 8000a1a:	2b08      	cmp	r3, #8
 8000a1c:	d108      	bne.n	8000a30 <sr04_init+0xd4>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	6892      	ldr	r2, [r2, #8]
 8000a28:	6812      	ldr	r2, [r2, #0]
 8000a2a:	6a1b      	ldr	r3, [r3, #32]
 8000a2c:	6213      	str	r3, [r2, #32]
 8000a2e:	e007      	b.n	8000a40 <sr04_init+0xe4>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	6892      	ldr	r2, [r2, #8]
 8000a3a:	6812      	ldr	r2, [r2, #0]
 8000a3c:	6a1b      	ldr	r3, [r3, #32]
 8000a3e:	6213      	str	r3, [r2, #32]
  // Set capture flag to 0
  sr04_struct->capture_flag = 0;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	739a      	strb	r2, [r3, #14]
  // Enable echo pin
  HAL_TIM_IC_Start_IT(sr04_struct->echo_htim, sr04_struct->echo_channel);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	899b      	ldrh	r3, [r3, #12]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4610      	mov	r0, r2
 8000a52:	f001 fbe5 	bl	8002220 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(sr04_struct->echo_htim);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 fb24 	bl	80020a8 <HAL_TIM_Base_Start_IT>
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <sr04_trigger>:

void sr04_trigger(sr04_t *sr04_struct){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  // Send pulse to trigger pin
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_SET);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6818      	ldr	r0, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	889b      	ldrh	r3, [r3, #4]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f000 fe52 	bl	8001724 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f000 fb95 	bl	80011b0 <HAL_Delay>
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_RESET);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	889b      	ldrh	r3, [r3, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	f000 fe47 	bl	8001724 <HAL_GPIO_WritePin>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <sr04_read_distance>:

void sr04_read_distance(sr04_t *sr04_struct){
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  // This function should be called in the timer input capture callback
  switch (sr04_struct->capture_flag){
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7b9b      	ldrb	r3, [r3, #14]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d002      	beq.n	8000ab6 <sr04_read_distance+0x16>
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d07b      	beq.n	8000bac <sr04_read_distance+0x10c>
      }
      sr04_struct->last_distance = sr04_struct->distance;
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
      break;
  }
}
 8000ab4:	e11e      	b.n	8000cf4 <sr04_read_distance+0x254>
      sr04_struct->start_counter = __HAL_TIM_GET_COUNTER(sr04_struct->echo_htim);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	611a      	str	r2, [r3, #16]
      sr04_struct->capture_flag = 1;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	739a      	strb	r2, [r3, #14]
      sr04_struct->tim_update_count = 0;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	841a      	strh	r2, [r3, #32]
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	899b      	ldrh	r3, [r3, #12]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10a      	bne.n	8000aec <sr04_read_distance+0x4c>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	6a1a      	ldr	r2, [r3, #32]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f022 020a 	bic.w	r2, r2, #10
 8000ae8:	621a      	str	r2, [r3, #32]
 8000aea:	e027      	b.n	8000b3c <sr04_read_distance+0x9c>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	899b      	ldrh	r3, [r3, #12]
 8000af0:	2b04      	cmp	r3, #4
 8000af2:	d10a      	bne.n	8000b0a <sr04_read_distance+0x6a>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	6a1b      	ldr	r3, [r3, #32]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	6892      	ldr	r2, [r2, #8]
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8000b06:	6213      	str	r3, [r2, #32]
 8000b08:	e018      	b.n	8000b3c <sr04_read_distance+0x9c>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	899b      	ldrh	r3, [r3, #12]
 8000b0e:	2b08      	cmp	r3, #8
 8000b10:	d10a      	bne.n	8000b28 <sr04_read_distance+0x88>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	6a1b      	ldr	r3, [r3, #32]
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	6892      	ldr	r2, [r2, #8]
 8000b1e:	6812      	ldr	r2, [r2, #0]
 8000b20:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8000b24:	6213      	str	r3, [r2, #32]
 8000b26:	e009      	b.n	8000b3c <sr04_read_distance+0x9c>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	6a1b      	ldr	r3, [r3, #32]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	6892      	ldr	r2, [r2, #8]
 8000b34:	6812      	ldr	r2, [r2, #0]
 8000b36:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8000b3a:	6213      	str	r3, [r2, #32]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	899b      	ldrh	r3, [r3, #12]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d10a      	bne.n	8000b5a <sr04_read_distance+0xba>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6a1a      	ldr	r2, [r3, #32]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f042 0202 	orr.w	r2, r2, #2
 8000b56:	621a      	str	r2, [r3, #32]
      break;
 8000b58:	e0cc      	b.n	8000cf4 <sr04_read_distance+0x254>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	899b      	ldrh	r3, [r3, #12]
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d10a      	bne.n	8000b78 <sr04_read_distance+0xd8>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6a1b      	ldr	r3, [r3, #32]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	6892      	ldr	r2, [r2, #8]
 8000b6e:	6812      	ldr	r2, [r2, #0]
 8000b70:	f043 0320 	orr.w	r3, r3, #32
 8000b74:	6213      	str	r3, [r2, #32]
      break;
 8000b76:	e0bd      	b.n	8000cf4 <sr04_read_distance+0x254>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	899b      	ldrh	r3, [r3, #12]
 8000b7c:	2b08      	cmp	r3, #8
 8000b7e:	d10a      	bne.n	8000b96 <sr04_read_distance+0xf6>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	6a1b      	ldr	r3, [r3, #32]
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6892      	ldr	r2, [r2, #8]
 8000b8c:	6812      	ldr	r2, [r2, #0]
 8000b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b92:	6213      	str	r3, [r2, #32]
      break;
 8000b94:	e0ae      	b.n	8000cf4 <sr04_read_distance+0x254>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	6a1b      	ldr	r3, [r3, #32]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	6892      	ldr	r2, [r2, #8]
 8000ba2:	6812      	ldr	r2, [r2, #0]
 8000ba4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ba8:	6213      	str	r3, [r2, #32]
      break;
 8000baa:	e0a3      	b.n	8000cf4 <sr04_read_distance+0x254>
      sr04_struct->end_counter = __HAL_TIM_GET_COUNTER(sr04_struct->echo_htim) + sr04_struct->tim_update_count * sr04_struct->echo_htim->Init.Period;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	8c1b      	ldrh	r3, [r3, #32]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	fb01 f303 	mul.w	r3, r1, r3
 8000bc4:	441a      	add	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	615a      	str	r2, [r3, #20]
      sr04_struct->capture_flag = 0;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	739a      	strb	r2, [r3, #14]
      sr04_struct->distance = (sr04_struct->end_counter - sr04_struct->start_counter) * 340 / (SystemCoreClock / 1000000) / 2 / (1000 / sr04_struct->echo_htim->Init.Prescaler);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	695a      	ldr	r2, [r3, #20]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8000bde:	fb03 f202 	mul.w	r2, r3, r2
 8000be2:	4b47      	ldr	r3, [pc, #284]	@ (8000d00 <sr04_read_distance+0x260>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4947      	ldr	r1, [pc, #284]	@ (8000d04 <sr04_read_distance+0x264>)
 8000be8:	fba1 1303 	umull	r1, r3, r1, r3
 8000bec:	0c9b      	lsrs	r3, r3, #18
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	085a      	lsrs	r2, r3, #1
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c02:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	619a      	str	r2, [r3, #24]
      if(sr04_struct->distance > DISTANCE_LIMIT){
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d903      	bls.n	8000c1e <sr04_read_distance+0x17e>
        sr04_struct->distance = sr04_struct->last_distance;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	69da      	ldr	r2, [r3, #28]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	619a      	str	r2, [r3, #24]
      sr04_struct->last_distance = sr04_struct->distance;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	699a      	ldr	r2, [r3, #24]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	61da      	str	r2, [r3, #28]
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	899b      	ldrh	r3, [r3, #12]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10a      	bne.n	8000c44 <sr04_read_distance+0x1a4>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6a1a      	ldr	r2, [r3, #32]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f022 020a 	bic.w	r2, r2, #10
 8000c40:	621a      	str	r2, [r3, #32]
 8000c42:	e027      	b.n	8000c94 <sr04_read_distance+0x1f4>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	899b      	ldrh	r3, [r3, #12]
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d10a      	bne.n	8000c62 <sr04_read_distance+0x1c2>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6a1b      	ldr	r3, [r3, #32]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	6892      	ldr	r2, [r2, #8]
 8000c58:	6812      	ldr	r2, [r2, #0]
 8000c5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8000c5e:	6213      	str	r3, [r2, #32]
 8000c60:	e018      	b.n	8000c94 <sr04_read_distance+0x1f4>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	899b      	ldrh	r3, [r3, #12]
 8000c66:	2b08      	cmp	r3, #8
 8000c68:	d10a      	bne.n	8000c80 <sr04_read_distance+0x1e0>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6a1b      	ldr	r3, [r3, #32]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	6892      	ldr	r2, [r2, #8]
 8000c76:	6812      	ldr	r2, [r2, #0]
 8000c78:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8000c7c:	6213      	str	r3, [r2, #32]
 8000c7e:	e009      	b.n	8000c94 <sr04_read_distance+0x1f4>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6a1b      	ldr	r3, [r3, #32]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	6892      	ldr	r2, [r2, #8]
 8000c8c:	6812      	ldr	r2, [r2, #0]
 8000c8e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8000c92:	6213      	str	r3, [r2, #32]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	899b      	ldrh	r3, [r3, #12]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d108      	bne.n	8000cae <sr04_read_distance+0x20e>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6a12      	ldr	r2, [r2, #32]
 8000caa:	621a      	str	r2, [r3, #32]
      break;
 8000cac:	e021      	b.n	8000cf2 <sr04_read_distance+0x252>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	899b      	ldrh	r3, [r3, #12]
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	d108      	bne.n	8000cc8 <sr04_read_distance+0x228>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	6892      	ldr	r2, [r2, #8]
 8000cc0:	6812      	ldr	r2, [r2, #0]
 8000cc2:	6a1b      	ldr	r3, [r3, #32]
 8000cc4:	6213      	str	r3, [r2, #32]
      break;
 8000cc6:	e014      	b.n	8000cf2 <sr04_read_distance+0x252>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	899b      	ldrh	r3, [r3, #12]
 8000ccc:	2b08      	cmp	r3, #8
 8000cce:	d108      	bne.n	8000ce2 <sr04_read_distance+0x242>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	6892      	ldr	r2, [r2, #8]
 8000cda:	6812      	ldr	r2, [r2, #0]
 8000cdc:	6a1b      	ldr	r3, [r3, #32]
 8000cde:	6213      	str	r3, [r2, #32]
      break;
 8000ce0:	e007      	b.n	8000cf2 <sr04_read_distance+0x252>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	6892      	ldr	r2, [r2, #8]
 8000cec:	6812      	ldr	r2, [r2, #0]
 8000cee:	6a1b      	ldr	r3, [r3, #32]
 8000cf0:	6213      	str	r3, [r2, #32]
      break;
 8000cf2:	bf00      	nop
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	20000000 	.word	0x20000000
 8000d04:	431bde83 	.word	0x431bde83

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	4a0f      	ldr	r2, [pc, #60]	@ (8000d54 <HAL_MspInit+0x4c>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d54 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	4a08      	ldr	r2, [pc, #32]	@ (8000d54 <HAL_MspInit+0x4c>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	@ 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d78:	d133      	bne.n	8000de2 <HAL_TIM_Base_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dec <HAL_TIM_Base_MspInit+0x94>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	4a1a      	ldr	r2, [pc, #104]	@ (8000dec <HAL_TIM_Base_MspInit+0x94>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8a:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <HAL_TIM_Base_MspInit+0x94>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <HAL_TIM_Base_MspInit+0x94>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a13      	ldr	r2, [pc, #76]	@ (8000dec <HAL_TIM_Base_MspInit+0x94>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <HAL_TIM_Base_MspInit+0x94>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000db2:	2301      	movs	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4808      	ldr	r0, [pc, #32]	@ (8000df0 <HAL_TIM_Base_MspInit+0x98>)
 8000dce:	f000 fb25 	bl	800141c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	201c      	movs	r0, #28
 8000dd8:	f000 fae9 	bl	80013ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ddc:	201c      	movs	r0, #28
 8000dde:	f000 fb02 	bl	80013e6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	@ 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000

08000df4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	@ 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a19      	ldr	r2, [pc, #100]	@ (8000e78 <HAL_UART_MspInit+0x84>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d12b      	bne.n	8000e6e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <HAL_UART_MspInit+0x88>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	4a17      	ldr	r2, [pc, #92]	@ (8000e7c <HAL_UART_MspInit+0x88>)
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <HAL_UART_MspInit+0x88>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <HAL_UART_MspInit+0x88>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a10      	ldr	r2, [pc, #64]	@ (8000e7c <HAL_UART_MspInit+0x88>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <HAL_UART_MspInit+0x88>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e4e:	230c      	movs	r3, #12
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5e:	2307      	movs	r3, #7
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	@ (8000e80 <HAL_UART_MspInit+0x8c>)
 8000e6a:	f000 fad7 	bl	800141c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	@ 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40004400 	.word	0x40004400
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020000 	.word	0x40020000

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <NMI_Handler+0x4>

08000e8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eda:	f000 f949 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  // Capture interrupt handling
	  if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_CC1) != RESET)
 8000ee8:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <TIM2_IRQHandler+0x58>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d109      	bne.n	8000f0a <TIM2_IRQHandler+0x26>
	  {
	      if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_CC1) != RESET)
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <TIM2_IRQHandler+0x58>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d102      	bne.n	8000f0a <TIM2_IRQHandler+0x26>
	      {
	          sr04_read_distance(&sr04);
 8000f04:	480e      	ldr	r0, [pc, #56]	@ (8000f40 <TIM2_IRQHandler+0x5c>)
 8000f06:	f7ff fdcb 	bl	8000aa0 <sr04_read_distance>
	      }
	  }
	  // Update interrupt handling
	  if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET)
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <TIM2_IRQHandler+0x58>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d10c      	bne.n	8000f32 <TIM2_IRQHandler+0x4e>
	  {
	      if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET)
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <TIM2_IRQHandler+0x58>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d105      	bne.n	8000f32 <TIM2_IRQHandler+0x4e>
	      {
	          sr04.tim_update_count++;
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <TIM2_IRQHandler+0x5c>)
 8000f28:	8c1b      	ldrh	r3, [r3, #32]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <TIM2_IRQHandler+0x5c>)
 8000f30:	841a      	strh	r2, [r3, #32]
	      }
	  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f32:	4802      	ldr	r0, [pc, #8]	@ (8000f3c <TIM2_IRQHandler+0x58>)
 8000f34:	f001 fa8e 	bl	8002454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000084 	.word	0x20000084
 8000f40:	20000114 	.word	0x20000114

08000f44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	e00a      	b.n	8000f6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f56:	f3af 8000 	nop.w
 8000f5a:	4601      	mov	r1, r0
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	60ba      	str	r2, [r7, #8]
 8000f62:	b2ca      	uxtb	r2, r1
 8000f64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dbf0      	blt.n	8000f56 <_read+0x12>
  }

  return len;
 8000f74:	687b      	ldr	r3, [r7, #4]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fa6:	605a      	str	r2, [r3, #4]
  return 0;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_isatty>:

int _isatty(int file)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	@ (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001018:	f002 fcfa 	bl	8003a10 <__errno>
 800101c:	4603      	mov	r3, r0
 800101e:	220c      	movs	r2, #12
 8001020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e009      	b.n	800103c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b07      	ldr	r3, [pc, #28]	@ (800104c <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a05      	ldr	r2, [pc, #20]	@ (800104c <_sbrk+0x64>)
 8001038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20020000 	.word	0x20020000
 8001048:	00000400 	.word	0x00000400
 800104c:	20000138 	.word	0x20000138
 8001050:	20000290 	.word	0x20000290

08001054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <SystemInit+0x20>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105e:	4a05      	ldr	r2, [pc, #20]	@ (8001074 <SystemInit+0x20>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800107c:	f7ff ffea 	bl	8001054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001080:	480c      	ldr	r0, [pc, #48]	@ (80010b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001082:	490d      	ldr	r1, [pc, #52]	@ (80010b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001098:	4c0a      	ldr	r4, [pc, #40]	@ (80010c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a6:	f002 fcb9 	bl	8003a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff faa5 	bl	80005f8 <main>
  bx  lr    
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010bc:	08004628 	.word	0x08004628
  ldr r2, =_sbss
 80010c0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010c4:	2000028c 	.word	0x2000028c

080010c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC_IRQHandler>
	...

080010cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d0:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0d      	ldr	r2, [pc, #52]	@ (800110c <HAL_Init+0x40>)
 80010d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010dc:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <HAL_Init+0x40>)
 80010e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4b08      	ldr	r3, [pc, #32]	@ (800110c <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a07      	ldr	r2, [pc, #28]	@ (800110c <HAL_Init+0x40>)
 80010ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 f94f 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fa:	200f      	movs	r0, #15
 80010fc:	f000 f808 	bl	8001110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001100:	f7ff fe02 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023c00 	.word	0x40023c00

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <HAL_InitTick+0x54>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <HAL_InitTick+0x58>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f967 	bl	8001402 <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e00e      	b.n	800115c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d80a      	bhi.n	800115a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f000 f92f 	bl	80013ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001150:	4a06      	ldr	r2, [pc, #24]	@ (800116c <HAL_InitTick+0x5c>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	e000      	b.n	800115c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000000 	.word	0x20000000
 8001168:	20000008 	.word	0x20000008
 800116c:	20000004 	.word	0x20000004

08001170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <HAL_IncTick+0x20>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_IncTick+0x24>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a04      	ldr	r2, [pc, #16]	@ (8001194 <HAL_IncTick+0x24>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	2000013c 	.word	0x2000013c

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	@ (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2000013c 	.word	0x2000013c

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff ffee 	bl	8001198 <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffde 	bl	8001198 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	@ (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4907      	ldr	r1, [pc, #28]	@ (8001294 <__NVIC_EnableIRQ+0x38>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	@ (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	@ (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	@ 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	@ 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001364:	d301      	bcc.n	800136a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <SysTick_Config+0x40>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	210f      	movs	r1, #15
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f7ff ff8e 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <SysTick_Config+0x40>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <SysTick_Config+0x40>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff29 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c0:	f7ff ff3e 	bl	8001240 <__NVIC_GetPriorityGrouping>
 80013c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f7ff ff8e 	bl	80012ec <NVIC_EncodePriority>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff5d 	bl	8001298 <__NVIC_SetPriority>
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff31 	bl	800125c <__NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffa2 	bl	8001354 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	@ 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	e159      	b.n	80016ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001438:	2201      	movs	r2, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	429a      	cmp	r2, r3
 8001452:	f040 8148 	bne.w	80016e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b01      	cmp	r3, #1
 8001460:	d005      	beq.n	800146e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146a:	2b02      	cmp	r3, #2
 800146c:	d130      	bne.n	80014d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	2203      	movs	r2, #3
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a4:	2201      	movs	r2, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f003 0201 	and.w	r2, r3, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d017      	beq.n	800150c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d123      	bne.n	8001560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	08da      	lsrs	r2, r3, #3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3208      	adds	r2, #8
 8001520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	220f      	movs	r2, #15
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	08da      	lsrs	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3208      	adds	r2, #8
 800155a:	69b9      	ldr	r1, [r7, #24]
 800155c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2203      	movs	r2, #3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0203 	and.w	r2, r3, #3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80a2 	beq.w	80016e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b57      	ldr	r3, [pc, #348]	@ (8001704 <HAL_GPIO_Init+0x2e8>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	4a56      	ldr	r2, [pc, #344]	@ (8001704 <HAL_GPIO_Init+0x2e8>)
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015b2:	4b54      	ldr	r3, [pc, #336]	@ (8001704 <HAL_GPIO_Init+0x2e8>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015be:	4a52      	ldr	r2, [pc, #328]	@ (8001708 <HAL_GPIO_Init+0x2ec>)
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a49      	ldr	r2, [pc, #292]	@ (800170c <HAL_GPIO_Init+0x2f0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x202>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a48      	ldr	r2, [pc, #288]	@ (8001710 <HAL_GPIO_Init+0x2f4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x1fe>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a47      	ldr	r2, [pc, #284]	@ (8001714 <HAL_GPIO_Init+0x2f8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x1fa>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a46      	ldr	r2, [pc, #280]	@ (8001718 <HAL_GPIO_Init+0x2fc>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x1f6>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a45      	ldr	r2, [pc, #276]	@ (800171c <HAL_GPIO_Init+0x300>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x1f2>
 800160a:	2304      	movs	r3, #4
 800160c:	e008      	b.n	8001620 <HAL_GPIO_Init+0x204>
 800160e:	2307      	movs	r3, #7
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x204>
 8001612:	2303      	movs	r3, #3
 8001614:	e004      	b.n	8001620 <HAL_GPIO_Init+0x204>
 8001616:	2302      	movs	r3, #2
 8001618:	e002      	b.n	8001620 <HAL_GPIO_Init+0x204>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_GPIO_Init+0x204>
 800161e:	2300      	movs	r3, #0
 8001620:	69fa      	ldr	r2, [r7, #28]
 8001622:	f002 0203 	and.w	r2, r2, #3
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	4093      	lsls	r3, r2
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001630:	4935      	ldr	r1, [pc, #212]	@ (8001708 <HAL_GPIO_Init+0x2ec>)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163e:	4b38      	ldr	r3, [pc, #224]	@ (8001720 <HAL_GPIO_Init+0x304>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001662:	4a2f      	ldr	r2, [pc, #188]	@ (8001720 <HAL_GPIO_Init+0x304>)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001668:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <HAL_GPIO_Init+0x304>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800168c:	4a24      	ldr	r2, [pc, #144]	@ (8001720 <HAL_GPIO_Init+0x304>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001692:	4b23      	ldr	r3, [pc, #140]	@ (8001720 <HAL_GPIO_Init+0x304>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001720 <HAL_GPIO_Init+0x304>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016bc:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <HAL_GPIO_Init+0x304>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001720 <HAL_GPIO_Init+0x304>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3301      	adds	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b0f      	cmp	r3, #15
 80016f0:	f67f aea2 	bls.w	8001438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3724      	adds	r7, #36	@ 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	40013800 	.word	0x40013800
 800170c:	40020000 	.word	0x40020000
 8001710:	40020400 	.word	0x40020400
 8001714:	40020800 	.word	0x40020800
 8001718:	40020c00 	.word	0x40020c00
 800171c:	40021000 	.word	0x40021000
 8001720:	40013c00 	.word	0x40013c00

08001724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
 8001730:	4613      	mov	r3, r2
 8001732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001734:	787b      	ldrb	r3, [r7, #1]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800173a:	887a      	ldrh	r2, [r7, #2]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001740:	e003      	b.n	800174a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001742:	887b      	ldrh	r3, [r7, #2]
 8001744:	041a      	lsls	r2, r3, #16
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	619a      	str	r2, [r3, #24]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e267      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d075      	beq.n	8001862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001776:	4b88      	ldr	r3, [pc, #544]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b04      	cmp	r3, #4
 8001780:	d00c      	beq.n	800179c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001782:	4b85      	ldr	r3, [pc, #532]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800178a:	2b08      	cmp	r3, #8
 800178c:	d112      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800178e:	4b82      	ldr	r3, [pc, #520]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001796:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800179a:	d10b      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179c:	4b7e      	ldr	r3, [pc, #504]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d05b      	beq.n	8001860 <HAL_RCC_OscConfig+0x108>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d157      	bne.n	8001860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e242      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017bc:	d106      	bne.n	80017cc <HAL_RCC_OscConfig+0x74>
 80017be:	4b76      	ldr	r3, [pc, #472]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a75      	ldr	r2, [pc, #468]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e01d      	b.n	8001808 <HAL_RCC_OscConfig+0xb0>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x98>
 80017d6:	4b70      	ldr	r3, [pc, #448]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a6f      	ldr	r2, [pc, #444]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a6c      	ldr	r2, [pc, #432]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_OscConfig+0xb0>
 80017f0:	4b69      	ldr	r3, [pc, #420]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a68      	ldr	r2, [pc, #416]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b66      	ldr	r3, [pc, #408]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a65      	ldr	r2, [pc, #404]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d013      	beq.n	8001838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fcc2 	bl	8001198 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001818:	f7ff fcbe 	bl	8001198 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	@ 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e207      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b5b      	ldr	r3, [pc, #364]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0xc0>
 8001836:	e014      	b.n	8001862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fcae 	bl	8001198 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff fcaa 	bl	8001198 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	@ 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e1f3      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001852:	4b51      	ldr	r3, [pc, #324]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0xe8>
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d063      	beq.n	8001936 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800186e:	4b4a      	ldr	r3, [pc, #296]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187a:	4b47      	ldr	r3, [pc, #284]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001882:	2b08      	cmp	r3, #8
 8001884:	d11c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001886:	4b44      	ldr	r3, [pc, #272]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d116      	bne.n	80018c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	4b41      	ldr	r3, [pc, #260]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_RCC_OscConfig+0x152>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e1c7      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4937      	ldr	r1, [pc, #220]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018be:	e03a      	b.n	8001936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d020      	beq.n	800190a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c8:	4b34      	ldr	r3, [pc, #208]	@ (800199c <HAL_RCC_OscConfig+0x244>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ce:	f7ff fc63 	bl	8001198 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff fc5f 	bl	8001198 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e1a8      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f4:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4925      	ldr	r1, [pc, #148]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
 8001908:	e015      	b.n	8001936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190a:	4b24      	ldr	r3, [pc, #144]	@ (800199c <HAL_RCC_OscConfig+0x244>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff fc42 	bl	8001198 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001918:	f7ff fc3e 	bl	8001198 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e187      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192a:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d036      	beq.n	80019b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d016      	beq.n	8001978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_RCC_OscConfig+0x248>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff fc22 	bl	8001198 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff fc1e 	bl	8001198 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e167      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196a:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 800196c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x200>
 8001976:	e01b      	b.n	80019b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001978:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <HAL_RCC_OscConfig+0x248>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197e:	f7ff fc0b 	bl	8001198 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001984:	e00e      	b.n	80019a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff fc07 	bl	8001198 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d907      	bls.n	80019a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e150      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
 8001998:	40023800 	.word	0x40023800
 800199c:	42470000 	.word	0x42470000
 80019a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a4:	4b88      	ldr	r3, [pc, #544]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 80019a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1ea      	bne.n	8001986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 8097 	beq.w	8001aec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c2:	4b81      	ldr	r3, [pc, #516]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10f      	bne.n	80019ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	4b7d      	ldr	r3, [pc, #500]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	4a7c      	ldr	r2, [pc, #496]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019de:	4b7a      	ldr	r3, [pc, #488]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ea:	2301      	movs	r3, #1
 80019ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ee:	4b77      	ldr	r3, [pc, #476]	@ (8001bcc <HAL_RCC_OscConfig+0x474>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d118      	bne.n	8001a2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fa:	4b74      	ldr	r3, [pc, #464]	@ (8001bcc <HAL_RCC_OscConfig+0x474>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a73      	ldr	r2, [pc, #460]	@ (8001bcc <HAL_RCC_OscConfig+0x474>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a06:	f7ff fbc7 	bl	8001198 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0e:	f7ff fbc3 	bl	8001198 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e10c      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	4b6a      	ldr	r3, [pc, #424]	@ (8001bcc <HAL_RCC_OscConfig+0x474>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d106      	bne.n	8001a42 <HAL_RCC_OscConfig+0x2ea>
 8001a34:	4b64      	ldr	r3, [pc, #400]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a38:	4a63      	ldr	r2, [pc, #396]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a40:	e01c      	b.n	8001a7c <HAL_RCC_OscConfig+0x324>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b05      	cmp	r3, #5
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x30c>
 8001a4a:	4b5f      	ldr	r3, [pc, #380]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4e:	4a5e      	ldr	r2, [pc, #376]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a56:	4b5c      	ldr	r3, [pc, #368]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5a:	4a5b      	ldr	r2, [pc, #364]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a62:	e00b      	b.n	8001a7c <HAL_RCC_OscConfig+0x324>
 8001a64:	4b58      	ldr	r3, [pc, #352]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a68:	4a57      	ldr	r2, [pc, #348]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a70:	4b55      	ldr	r3, [pc, #340]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a74:	4a54      	ldr	r2, [pc, #336]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a76:	f023 0304 	bic.w	r3, r3, #4
 8001a7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d015      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a84:	f7ff fb88 	bl	8001198 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fb84 	bl	8001198 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e0cb      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa2:	4b49      	ldr	r3, [pc, #292]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0ee      	beq.n	8001a8c <HAL_RCC_OscConfig+0x334>
 8001aae:	e014      	b.n	8001ada <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab0:	f7ff fb72 	bl	8001198 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab6:	e00a      	b.n	8001ace <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fb6e 	bl	8001198 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0b5      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ace:	4b3e      	ldr	r3, [pc, #248]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ee      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae0:	4b39      	ldr	r3, [pc, #228]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	4a38      	ldr	r2, [pc, #224]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001ae6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80a1 	beq.w	8001c38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001af6:	4b34      	ldr	r3, [pc, #208]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d05c      	beq.n	8001bbc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d141      	bne.n	8001b8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	4b31      	ldr	r3, [pc, #196]	@ (8001bd0 <HAL_RCC_OscConfig+0x478>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff fb42 	bl	8001198 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff fb3e 	bl	8001198 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e087      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2a:	4b27      	ldr	r3, [pc, #156]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69da      	ldr	r2, [r3, #28]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b44:	019b      	lsls	r3, r3, #6
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4c:	085b      	lsrs	r3, r3, #1
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	041b      	lsls	r3, r3, #16
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b58:	061b      	lsls	r3, r3, #24
 8001b5a:	491b      	ldr	r1, [pc, #108]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b60:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <HAL_RCC_OscConfig+0x478>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff fb17 	bl	8001198 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7ff fb13 	bl	8001198 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e05c      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x416>
 8001b8c:	e054      	b.n	8001c38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <HAL_RCC_OscConfig+0x478>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fb00 	bl	8001198 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff fafc 	bl	8001198 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e045      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x444>
 8001bba:	e03d      	b.n	8001c38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d107      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e038      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40007000 	.word	0x40007000
 8001bd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <HAL_RCC_OscConfig+0x4ec>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d028      	beq.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d121      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d11a      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c04:	4013      	ands	r3, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d111      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c1a:	085b      	lsrs	r3, r3, #1
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e000      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800

08001c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0cc      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b68      	ldr	r3, [pc, #416]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d90c      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b65      	ldr	r3, [pc, #404]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b63      	ldr	r3, [pc, #396]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b8      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c9c:	4b59      	ldr	r3, [pc, #356]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a58      	ldr	r2, [pc, #352]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ca6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb4:	4b53      	ldr	r3, [pc, #332]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc0:	4b50      	ldr	r3, [pc, #320]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	494d      	ldr	r1, [pc, #308]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d044      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	4b47      	ldr	r3, [pc, #284]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d119      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e07f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d003      	beq.n	8001d06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b3f      	ldr	r3, [pc, #252]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e06f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b3b      	ldr	r3, [pc, #236]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e067      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b37      	ldr	r3, [pc, #220]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4934      	ldr	r1, [pc, #208]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d38:	f7ff fa2e 	bl	8001198 <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff fa2a 	bl	8001198 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e04f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b2b      	ldr	r3, [pc, #172]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b25      	ldr	r3, [pc, #148]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d20c      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b22      	ldr	r3, [pc, #136]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b20      	ldr	r3, [pc, #128]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e032      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9c:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4916      	ldr	r1, [pc, #88]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dba:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	490e      	ldr	r1, [pc, #56]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dce:	f000 f821 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	490a      	ldr	r1, [pc, #40]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	5ccb      	ldrb	r3, [r1, r3]
 8001de2:	fa22 f303 	lsr.w	r3, r2, r3
 8001de6:	4a09      	ldr	r2, [pc, #36]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dea:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <HAL_RCC_ClockConfig+0x1c8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f98e 	bl	8001110 <HAL_InitTick>

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00
 8001e04:	40023800 	.word	0x40023800
 8001e08:	080045cc 	.word	0x080045cc
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000004 	.word	0x20000004

08001e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e18:	b090      	sub	sp, #64	@ 0x40
 8001e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e2c:	4b59      	ldr	r3, [pc, #356]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d00d      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x40>
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	f200 80a1 	bhi.w	8001f80 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x34>
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d003      	beq.n	8001e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e46:	e09b      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e48:	4b53      	ldr	r3, [pc, #332]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e4c:	e09b      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e4e:	4b53      	ldr	r3, [pc, #332]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e52:	e098      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e54:	4b4f      	ldr	r3, [pc, #316]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e5c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d028      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	099b      	lsrs	r3, r3, #6
 8001e70:	2200      	movs	r2, #0
 8001e72:	623b      	str	r3, [r7, #32]
 8001e74:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4b47      	ldr	r3, [pc, #284]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e80:	fb03 f201 	mul.w	r2, r3, r1
 8001e84:	2300      	movs	r3, #0
 8001e86:	fb00 f303 	mul.w	r3, r0, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a43      	ldr	r2, [pc, #268]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e8e:	fba0 1202 	umull	r1, r2, r0, r2
 8001e92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e94:	460a      	mov	r2, r1
 8001e96:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001e98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e9a:	4413      	add	r3, r2
 8001e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	61fa      	str	r2, [r7, #28]
 8001ea6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001eae:	f7fe f9e7 	bl	8000280 <__aeabi_uldivmod>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001eba:	e053      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ebc:	4b35      	ldr	r3, [pc, #212]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	099b      	lsrs	r3, r3, #6
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	617a      	str	r2, [r7, #20]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ece:	f04f 0b00 	mov.w	fp, #0
 8001ed2:	4652      	mov	r2, sl
 8001ed4:	465b      	mov	r3, fp
 8001ed6:	f04f 0000 	mov.w	r0, #0
 8001eda:	f04f 0100 	mov.w	r1, #0
 8001ede:	0159      	lsls	r1, r3, #5
 8001ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ee4:	0150      	lsls	r0, r2, #5
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	ebb2 080a 	subs.w	r8, r2, sl
 8001eee:	eb63 090b 	sbc.w	r9, r3, fp
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001efe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f06:	ebb2 0408 	subs.w	r4, r2, r8
 8001f0a:	eb63 0509 	sbc.w	r5, r3, r9
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	00eb      	lsls	r3, r5, #3
 8001f18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f1c:	00e2      	lsls	r2, r4, #3
 8001f1e:	4614      	mov	r4, r2
 8001f20:	461d      	mov	r5, r3
 8001f22:	eb14 030a 	adds.w	r3, r4, sl
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	eb45 030b 	adc.w	r3, r5, fp
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f3a:	4629      	mov	r1, r5
 8001f3c:	028b      	lsls	r3, r1, #10
 8001f3e:	4621      	mov	r1, r4
 8001f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f44:	4621      	mov	r1, r4
 8001f46:	028a      	lsls	r2, r1, #10
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	60fa      	str	r2, [r7, #12]
 8001f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f58:	f7fe f992 	bl	8000280 <__aeabi_uldivmod>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4613      	mov	r3, r2
 8001f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f64:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	0c1b      	lsrs	r3, r3, #16
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001f74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f7e:	e002      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f80:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3740      	adds	r7, #64	@ 0x40
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	00f42400 	.word	0x00f42400
 8001f9c:	017d7840 	.word	0x017d7840

08001fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	@ (8001fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000000 	.word	0x20000000

08001fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fbc:	f7ff fff0 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	0a9b      	lsrs	r3, r3, #10
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	4903      	ldr	r1, [pc, #12]	@ (8001fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fce:	5ccb      	ldrb	r3, [r1, r3]
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	080045dc 	.word	0x080045dc

08001fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fe4:	f7ff ffdc 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	0b5b      	lsrs	r3, r3, #13
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	4903      	ldr	r1, [pc, #12]	@ (8002004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40023800 	.word	0x40023800
 8002004:	080045dc 	.word	0x080045dc

08002008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e041      	b.n	800209e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d106      	bne.n	8002034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7fe fe92 	bl	8000d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3304      	adds	r3, #4
 8002044:	4619      	mov	r1, r3
 8002046:	4610      	mov	r0, r2
 8002048:	f000 fc8a 	bl	8002960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d001      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e044      	b.n	800214a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002158 <HAL_TIM_Base_Start_IT+0xb0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d018      	beq.n	8002114 <HAL_TIM_Base_Start_IT+0x6c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ea:	d013      	beq.n	8002114 <HAL_TIM_Base_Start_IT+0x6c>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1a      	ldr	r2, [pc, #104]	@ (800215c <HAL_TIM_Base_Start_IT+0xb4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00e      	beq.n	8002114 <HAL_TIM_Base_Start_IT+0x6c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a19      	ldr	r2, [pc, #100]	@ (8002160 <HAL_TIM_Base_Start_IT+0xb8>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d009      	beq.n	8002114 <HAL_TIM_Base_Start_IT+0x6c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a17      	ldr	r2, [pc, #92]	@ (8002164 <HAL_TIM_Base_Start_IT+0xbc>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d004      	beq.n	8002114 <HAL_TIM_Base_Start_IT+0x6c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a16      	ldr	r2, [pc, #88]	@ (8002168 <HAL_TIM_Base_Start_IT+0xc0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d111      	bne.n	8002138 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b06      	cmp	r3, #6
 8002124:	d010      	beq.n	8002148 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0201 	orr.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002136:	e007      	b.n	8002148 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40010000 	.word	0x40010000
 800215c:	40000400 	.word	0x40000400
 8002160:	40000800 	.word	0x40000800
 8002164:	40000c00 	.word	0x40000c00
 8002168:	40014000 	.word	0x40014000

0800216c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e041      	b.n	8002202 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f839 	bl	800220a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3304      	adds	r3, #4
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f000 fbd8 	bl	8002960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d104      	bne.n	800223e <HAL_TIM_IC_Start_IT+0x1e>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800223a:	b2db      	uxtb	r3, r3
 800223c:	e013      	b.n	8002266 <HAL_TIM_IC_Start_IT+0x46>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b04      	cmp	r3, #4
 8002242:	d104      	bne.n	800224e <HAL_TIM_IC_Start_IT+0x2e>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800224a:	b2db      	uxtb	r3, r3
 800224c:	e00b      	b.n	8002266 <HAL_TIM_IC_Start_IT+0x46>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b08      	cmp	r3, #8
 8002252:	d104      	bne.n	800225e <HAL_TIM_IC_Start_IT+0x3e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800225a:	b2db      	uxtb	r3, r3
 800225c:	e003      	b.n	8002266 <HAL_TIM_IC_Start_IT+0x46>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002264:	b2db      	uxtb	r3, r3
 8002266:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d104      	bne.n	8002278 <HAL_TIM_IC_Start_IT+0x58>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002274:	b2db      	uxtb	r3, r3
 8002276:	e013      	b.n	80022a0 <HAL_TIM_IC_Start_IT+0x80>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2b04      	cmp	r3, #4
 800227c:	d104      	bne.n	8002288 <HAL_TIM_IC_Start_IT+0x68>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002284:	b2db      	uxtb	r3, r3
 8002286:	e00b      	b.n	80022a0 <HAL_TIM_IC_Start_IT+0x80>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b08      	cmp	r3, #8
 800228c:	d104      	bne.n	8002298 <HAL_TIM_IC_Start_IT+0x78>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002294:	b2db      	uxtb	r3, r3
 8002296:	e003      	b.n	80022a0 <HAL_TIM_IC_Start_IT+0x80>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80022a2:	7bbb      	ldrb	r3, [r7, #14]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d102      	bne.n	80022ae <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80022a8:	7b7b      	ldrb	r3, [r7, #13]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d001      	beq.n	80022b2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e0c2      	b.n	8002438 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d104      	bne.n	80022c2 <HAL_TIM_IC_Start_IT+0xa2>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022c0:	e013      	b.n	80022ea <HAL_TIM_IC_Start_IT+0xca>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d104      	bne.n	80022d2 <HAL_TIM_IC_Start_IT+0xb2>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022d0:	e00b      	b.n	80022ea <HAL_TIM_IC_Start_IT+0xca>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d104      	bne.n	80022e2 <HAL_TIM_IC_Start_IT+0xc2>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022e0:	e003      	b.n	80022ea <HAL_TIM_IC_Start_IT+0xca>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2202      	movs	r2, #2
 80022e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d104      	bne.n	80022fa <HAL_TIM_IC_Start_IT+0xda>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022f8:	e013      	b.n	8002322 <HAL_TIM_IC_Start_IT+0x102>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d104      	bne.n	800230a <HAL_TIM_IC_Start_IT+0xea>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002308:	e00b      	b.n	8002322 <HAL_TIM_IC_Start_IT+0x102>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b08      	cmp	r3, #8
 800230e:	d104      	bne.n	800231a <HAL_TIM_IC_Start_IT+0xfa>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002318:	e003      	b.n	8002322 <HAL_TIM_IC_Start_IT+0x102>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2202      	movs	r2, #2
 800231e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b0c      	cmp	r3, #12
 8002326:	d841      	bhi.n	80023ac <HAL_TIM_IC_Start_IT+0x18c>
 8002328:	a201      	add	r2, pc, #4	@ (adr r2, 8002330 <HAL_TIM_IC_Start_IT+0x110>)
 800232a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232e:	bf00      	nop
 8002330:	08002365 	.word	0x08002365
 8002334:	080023ad 	.word	0x080023ad
 8002338:	080023ad 	.word	0x080023ad
 800233c:	080023ad 	.word	0x080023ad
 8002340:	08002377 	.word	0x08002377
 8002344:	080023ad 	.word	0x080023ad
 8002348:	080023ad 	.word	0x080023ad
 800234c:	080023ad 	.word	0x080023ad
 8002350:	08002389 	.word	0x08002389
 8002354:	080023ad 	.word	0x080023ad
 8002358:	080023ad 	.word	0x080023ad
 800235c:	080023ad 	.word	0x080023ad
 8002360:	0800239b 	.word	0x0800239b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0202 	orr.w	r2, r2, #2
 8002372:	60da      	str	r2, [r3, #12]
      break;
 8002374:	e01d      	b.n	80023b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0204 	orr.w	r2, r2, #4
 8002384:	60da      	str	r2, [r3, #12]
      break;
 8002386:	e014      	b.n	80023b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0208 	orr.w	r2, r2, #8
 8002396:	60da      	str	r2, [r3, #12]
      break;
 8002398:	e00b      	b.n	80023b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0210 	orr.w	r2, r2, #16
 80023a8:	60da      	str	r2, [r3, #12]
      break;
 80023aa:	e002      	b.n	80023b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
      break;
 80023b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d13e      	bne.n	8002436 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2201      	movs	r2, #1
 80023be:	6839      	ldr	r1, [r7, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fd0b 	bl	8002ddc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002440 <HAL_TIM_IC_Start_IT+0x220>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d018      	beq.n	8002402 <HAL_TIM_IC_Start_IT+0x1e2>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023d8:	d013      	beq.n	8002402 <HAL_TIM_IC_Start_IT+0x1e2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a19      	ldr	r2, [pc, #100]	@ (8002444 <HAL_TIM_IC_Start_IT+0x224>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d00e      	beq.n	8002402 <HAL_TIM_IC_Start_IT+0x1e2>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a17      	ldr	r2, [pc, #92]	@ (8002448 <HAL_TIM_IC_Start_IT+0x228>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d009      	beq.n	8002402 <HAL_TIM_IC_Start_IT+0x1e2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a16      	ldr	r2, [pc, #88]	@ (800244c <HAL_TIM_IC_Start_IT+0x22c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d004      	beq.n	8002402 <HAL_TIM_IC_Start_IT+0x1e2>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a14      	ldr	r2, [pc, #80]	@ (8002450 <HAL_TIM_IC_Start_IT+0x230>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d111      	bne.n	8002426 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b06      	cmp	r3, #6
 8002412:	d010      	beq.n	8002436 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002424:	e007      	b.n	8002436 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0201 	orr.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002436:	7bfb      	ldrb	r3, [r7, #15]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40010000 	.word	0x40010000
 8002444:	40000400 	.word	0x40000400
 8002448:	40000800 	.word	0x40000800
 800244c:	40000c00 	.word	0x40000c00
 8002450:	40014000 	.word	0x40014000

08002454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d020      	beq.n	80024b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01b      	beq.n	80024b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0202 	mvn.w	r2, #2
 8002488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fa3f 	bl	8002922 <HAL_TIM_IC_CaptureCallback>
 80024a4:	e005      	b.n	80024b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fa31 	bl	800290e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fa42 	bl	8002936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d020      	beq.n	8002504 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01b      	beq.n	8002504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0204 	mvn.w	r2, #4
 80024d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2202      	movs	r2, #2
 80024da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fa19 	bl	8002922 <HAL_TIM_IC_CaptureCallback>
 80024f0:	e005      	b.n	80024fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fa0b 	bl	800290e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fa1c 	bl	8002936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d020      	beq.n	8002550 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01b      	beq.n	8002550 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0208 	mvn.w	r2, #8
 8002520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2204      	movs	r2, #4
 8002526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f9f3 	bl	8002922 <HAL_TIM_IC_CaptureCallback>
 800253c:	e005      	b.n	800254a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f9e5 	bl	800290e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f9f6 	bl	8002936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b00      	cmp	r3, #0
 8002558:	d020      	beq.n	800259c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01b      	beq.n	800259c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0210 	mvn.w	r2, #16
 800256c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2208      	movs	r2, #8
 8002572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f9cd 	bl	8002922 <HAL_TIM_IC_CaptureCallback>
 8002588:	e005      	b.n	8002596 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f9bf 	bl	800290e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f9d0 	bl	8002936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00c      	beq.n	80025c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0201 	mvn.w	r2, #1
 80025b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f99d 	bl	80028fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00c      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80025dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fc9a 	bl	8002f18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00c      	beq.n	8002608 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f9a1 	bl	800294a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00c      	beq.n	800262c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0220 	mvn.w	r2, #32
 8002624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fc6c 	bl	8002f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_TIM_IC_ConfigChannel+0x1e>
 800264e:	2302      	movs	r3, #2
 8002650:	e088      	b.n	8002764 <HAL_TIM_IC_ConfigChannel+0x130>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d11b      	bne.n	8002698 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002670:	f000 f9fc 	bl	8002a6c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699a      	ldr	r2, [r3, #24]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 020c 	bic.w	r2, r2, #12
 8002682:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6999      	ldr	r1, [r3, #24]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	619a      	str	r2, [r3, #24]
 8002696:	e060      	b.n	800275a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b04      	cmp	r3, #4
 800269c:	d11c      	bne.n	80026d8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80026ae:	f000 fa74 	bl	8002b9a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699a      	ldr	r2, [r3, #24]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80026c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6999      	ldr	r1, [r3, #24]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	021a      	lsls	r2, r3, #8
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	619a      	str	r2, [r3, #24]
 80026d6:	e040      	b.n	800275a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d11b      	bne.n	8002716 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80026ee:	f000 fac1 	bl	8002c74 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 020c 	bic.w	r2, r2, #12
 8002700:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69d9      	ldr	r1, [r3, #28]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	61da      	str	r2, [r3, #28]
 8002714:	e021      	b.n	800275a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b0c      	cmp	r3, #12
 800271a:	d11c      	bne.n	8002756 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800272c:	f000 fade 	bl	8002cec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69da      	ldr	r2, [r3, #28]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800273e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69d9      	ldr	r1, [r3, #28]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	021a      	lsls	r2, r3, #8
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	61da      	str	r2, [r3, #28]
 8002754:	e001      	b.n	800275a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002762:	7dfb      	ldrb	r3, [r7, #23]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_TIM_ConfigClockSource+0x1c>
 8002784:	2302      	movs	r3, #2
 8002786:	e0b4      	b.n	80028f2 <HAL_TIM_ConfigClockSource+0x186>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c0:	d03e      	beq.n	8002840 <HAL_TIM_ConfigClockSource+0xd4>
 80027c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c6:	f200 8087 	bhi.w	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ce:	f000 8086 	beq.w	80028de <HAL_TIM_ConfigClockSource+0x172>
 80027d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027d6:	d87f      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027d8:	2b70      	cmp	r3, #112	@ 0x70
 80027da:	d01a      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0xa6>
 80027dc:	2b70      	cmp	r3, #112	@ 0x70
 80027de:	d87b      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027e0:	2b60      	cmp	r3, #96	@ 0x60
 80027e2:	d050      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x11a>
 80027e4:	2b60      	cmp	r3, #96	@ 0x60
 80027e6:	d877      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027e8:	2b50      	cmp	r3, #80	@ 0x50
 80027ea:	d03c      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0xfa>
 80027ec:	2b50      	cmp	r3, #80	@ 0x50
 80027ee:	d873      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027f0:	2b40      	cmp	r3, #64	@ 0x40
 80027f2:	d058      	beq.n	80028a6 <HAL_TIM_ConfigClockSource+0x13a>
 80027f4:	2b40      	cmp	r3, #64	@ 0x40
 80027f6:	d86f      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027f8:	2b30      	cmp	r3, #48	@ 0x30
 80027fa:	d064      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15a>
 80027fc:	2b30      	cmp	r3, #48	@ 0x30
 80027fe:	d86b      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002800:	2b20      	cmp	r3, #32
 8002802:	d060      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002804:	2b20      	cmp	r3, #32
 8002806:	d867      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002808:	2b00      	cmp	r3, #0
 800280a:	d05c      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15a>
 800280c:	2b10      	cmp	r3, #16
 800280e:	d05a      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002810:	e062      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002822:	f000 fabb 	bl	8002d9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	609a      	str	r2, [r3, #8]
      break;
 800283e:	e04f      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002850:	f000 faa4 	bl	8002d9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002862:	609a      	str	r2, [r3, #8]
      break;
 8002864:	e03c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002872:	461a      	mov	r2, r3
 8002874:	f000 f962 	bl	8002b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2150      	movs	r1, #80	@ 0x50
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fa71 	bl	8002d66 <TIM_ITRx_SetConfig>
      break;
 8002884:	e02c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002892:	461a      	mov	r2, r3
 8002894:	f000 f9be 	bl	8002c14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2160      	movs	r1, #96	@ 0x60
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fa61 	bl	8002d66 <TIM_ITRx_SetConfig>
      break;
 80028a4:	e01c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b2:	461a      	mov	r2, r3
 80028b4:	f000 f942 	bl	8002b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2140      	movs	r1, #64	@ 0x40
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fa51 	bl	8002d66 <TIM_ITRx_SetConfig>
      break;
 80028c4:	e00c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4619      	mov	r1, r3
 80028d0:	4610      	mov	r0, r2
 80028d2:	f000 fa48 	bl	8002d66 <TIM_ITRx_SetConfig>
      break;
 80028d6:	e003      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      break;
 80028dc:	e000      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a37      	ldr	r2, [pc, #220]	@ (8002a50 <TIM_Base_SetConfig+0xf0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d00f      	beq.n	8002998 <TIM_Base_SetConfig+0x38>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800297e:	d00b      	beq.n	8002998 <TIM_Base_SetConfig+0x38>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a34      	ldr	r2, [pc, #208]	@ (8002a54 <TIM_Base_SetConfig+0xf4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d007      	beq.n	8002998 <TIM_Base_SetConfig+0x38>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a33      	ldr	r2, [pc, #204]	@ (8002a58 <TIM_Base_SetConfig+0xf8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d003      	beq.n	8002998 <TIM_Base_SetConfig+0x38>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a32      	ldr	r2, [pc, #200]	@ (8002a5c <TIM_Base_SetConfig+0xfc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d108      	bne.n	80029aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800299e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a28      	ldr	r2, [pc, #160]	@ (8002a50 <TIM_Base_SetConfig+0xf0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d01b      	beq.n	80029ea <TIM_Base_SetConfig+0x8a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b8:	d017      	beq.n	80029ea <TIM_Base_SetConfig+0x8a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a25      	ldr	r2, [pc, #148]	@ (8002a54 <TIM_Base_SetConfig+0xf4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <TIM_Base_SetConfig+0x8a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a24      	ldr	r2, [pc, #144]	@ (8002a58 <TIM_Base_SetConfig+0xf8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00f      	beq.n	80029ea <TIM_Base_SetConfig+0x8a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a23      	ldr	r2, [pc, #140]	@ (8002a5c <TIM_Base_SetConfig+0xfc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00b      	beq.n	80029ea <TIM_Base_SetConfig+0x8a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a22      	ldr	r2, [pc, #136]	@ (8002a60 <TIM_Base_SetConfig+0x100>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d007      	beq.n	80029ea <TIM_Base_SetConfig+0x8a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a21      	ldr	r2, [pc, #132]	@ (8002a64 <TIM_Base_SetConfig+0x104>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d003      	beq.n	80029ea <TIM_Base_SetConfig+0x8a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a20      	ldr	r2, [pc, #128]	@ (8002a68 <TIM_Base_SetConfig+0x108>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d108      	bne.n	80029fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002a50 <TIM_Base_SetConfig+0xf0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d103      	bne.n	8002a2a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f043 0204 	orr.w	r2, r3, #4
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	601a      	str	r2, [r3, #0]
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40010000 	.word	0x40010000
 8002a54:	40000400 	.word	0x40000400
 8002a58:	40000800 	.word	0x40000800
 8002a5c:	40000c00 	.word	0x40000c00
 8002a60:	40014000 	.word	0x40014000
 8002a64:	40014400 	.word	0x40014400
 8002a68:	40014800 	.word	0x40014800

08002a6c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f023 0201 	bic.w	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4a24      	ldr	r2, [pc, #144]	@ (8002b28 <TIM_TI1_SetConfig+0xbc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <TIM_TI1_SetConfig+0x56>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa0:	d00f      	beq.n	8002ac2 <TIM_TI1_SetConfig+0x56>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a21      	ldr	r2, [pc, #132]	@ (8002b2c <TIM_TI1_SetConfig+0xc0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00b      	beq.n	8002ac2 <TIM_TI1_SetConfig+0x56>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4a20      	ldr	r2, [pc, #128]	@ (8002b30 <TIM_TI1_SetConfig+0xc4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <TIM_TI1_SetConfig+0x56>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b34 <TIM_TI1_SetConfig+0xc8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d003      	beq.n	8002ac2 <TIM_TI1_SetConfig+0x56>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4a1e      	ldr	r2, [pc, #120]	@ (8002b38 <TIM_TI1_SetConfig+0xcc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d101      	bne.n	8002ac6 <TIM_TI1_SetConfig+0x5a>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <TIM_TI1_SetConfig+0x5c>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	e003      	b.n	8002ae6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f023 030a 	bic.w	r3, r3, #10
 8002b00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f003 030a 	and.w	r3, r3, #10
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	621a      	str	r2, [r3, #32]
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40010000 	.word	0x40010000
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40000800 	.word	0x40000800
 8002b34:	40000c00 	.word	0x40000c00
 8002b38:	40014000 	.word	0x40014000

08002b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f023 0201 	bic.w	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f023 030a 	bic.w	r3, r3, #10
 8002b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	621a      	str	r2, [r3, #32]
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b087      	sub	sp, #28
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	f023 0210 	bic.w	r2, r3, #16
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	031b      	lsls	r3, r3, #12
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002bec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	621a      	str	r2, [r3, #32]
}
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	f023 0210 	bic.w	r2, r3, #16
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	031b      	lsls	r3, r3, #12
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c50:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	621a      	str	r2, [r3, #32]
}
 8002c68:	bf00      	nop
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f023 0303 	bic.w	r3, r3, #3
 8002ca0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cb0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8002cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	621a      	str	r2, [r3, #32]
}
 8002ce0:	bf00      	nop
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d18:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d2a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	031b      	lsls	r3, r3, #12
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8002d3e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	031b      	lsls	r3, r3, #12
 8002d44:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	621a      	str	r2, [r3, #32]
}
 8002d5a:	bf00      	nop
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f043 0307 	orr.w	r3, r3, #7
 8002d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	609a      	str	r2, [r3, #8]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	021a      	lsls	r2, r3, #8
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	609a      	str	r2, [r3, #8]
}
 8002dd0:	bf00      	nop
 8002dd2:	371c      	adds	r7, #28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	2201      	movs	r2, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a1a      	ldr	r2, [r3, #32]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	401a      	ands	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a1a      	ldr	r2, [r3, #32]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	fa01 f303 	lsl.w	r3, r1, r3
 8002e14:	431a      	orrs	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	621a      	str	r2, [r3, #32]
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e050      	b.n	8002ee2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d018      	beq.n	8002eb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e8c:	d013      	beq.n	8002eb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a18      	ldr	r2, [pc, #96]	@ (8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00e      	beq.n	8002eb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a16      	ldr	r2, [pc, #88]	@ (8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d009      	beq.n	8002eb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a15      	ldr	r2, [pc, #84]	@ (8002efc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a13      	ldr	r2, [pc, #76]	@ (8002f00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ebc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40010000 	.word	0x40010000
 8002ef4:	40000400 	.word	0x40000400
 8002ef8:	40000800 	.word	0x40000800
 8002efc:	40000c00 	.word	0x40000c00
 8002f00:	40014000 	.word	0x40014000

08002f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e042      	b.n	8002fc4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fd ff4e 	bl	8000df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	@ 0x24
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f973 	bl	800325c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	@ 0x28
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d175      	bne.n	80030d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_UART_Transmit+0x2c>
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e06e      	b.n	80030da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2221      	movs	r2, #33	@ 0x21
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800300a:	f7fe f8c5 	bl	8001198 <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	88fa      	ldrh	r2, [r7, #6]
 8003014:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	88fa      	ldrh	r2, [r7, #6]
 800301a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003024:	d108      	bne.n	8003038 <HAL_UART_Transmit+0x6c>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d104      	bne.n	8003038 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	e003      	b.n	8003040 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800303c:	2300      	movs	r3, #0
 800303e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003040:	e02e      	b.n	80030a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2200      	movs	r2, #0
 800304a:	2180      	movs	r1, #128	@ 0x80
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f848 	bl	80030e2 <UART_WaitOnFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e03a      	b.n	80030da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003078:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	3302      	adds	r3, #2
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	e007      	b.n	8003092 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	3301      	adds	r3, #1
 8003090:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1cb      	bne.n	8003042 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2200      	movs	r2, #0
 80030b2:	2140      	movs	r1, #64	@ 0x40
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f814 	bl	80030e2 <UART_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e006      	b.n	80030da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	e000      	b.n	80030da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
  }
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3720      	adds	r7, #32
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b086      	sub	sp, #24
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030f2:	e03b      	b.n	800316c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fa:	d037      	beq.n	800316c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fc:	f7fe f84c 	bl	8001198 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	6a3a      	ldr	r2, [r7, #32]
 8003108:	429a      	cmp	r2, r3
 800310a:	d302      	bcc.n	8003112 <UART_WaitOnFlagUntilTimeout+0x30>
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e03a      	b.n	800318c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d023      	beq.n	800316c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b80      	cmp	r3, #128	@ 0x80
 8003128:	d020      	beq.n	800316c <UART_WaitOnFlagUntilTimeout+0x8a>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b40      	cmp	r3, #64	@ 0x40
 800312e:	d01d      	beq.n	800316c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b08      	cmp	r3, #8
 800313c:	d116      	bne.n	800316c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f81d 	bl	8003194 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2208      	movs	r2, #8
 800315e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e00f      	b.n	800318c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	4013      	ands	r3, r2
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	429a      	cmp	r2, r3
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	429a      	cmp	r2, r3
 8003188:	d0b4      	beq.n	80030f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003194:	b480      	push	{r7}
 8003196:	b095      	sub	sp, #84	@ 0x54
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	330c      	adds	r3, #12
 80031a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a6:	e853 3f00 	ldrex	r3, [r3]
 80031aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	330c      	adds	r3, #12
 80031ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80031be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031c4:	e841 2300 	strex	r3, r2, [r1]
 80031c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e5      	bne.n	800319c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3314      	adds	r3, #20
 80031d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	e853 3f00 	ldrex	r3, [r3]
 80031de:	61fb      	str	r3, [r7, #28]
   return(result);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3314      	adds	r3, #20
 80031ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031f8:	e841 2300 	strex	r3, r2, [r1]
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e5      	bne.n	80031d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003208:	2b01      	cmp	r3, #1
 800320a:	d119      	bne.n	8003240 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	330c      	adds	r3, #12
 8003212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	60bb      	str	r3, [r7, #8]
   return(result);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f023 0310 	bic.w	r3, r3, #16
 8003222:	647b      	str	r3, [r7, #68]	@ 0x44
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800322c:	61ba      	str	r2, [r7, #24]
 800322e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6979      	ldr	r1, [r7, #20]
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	613b      	str	r3, [r7, #16]
   return(result);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e5      	bne.n	800320c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800324e:	bf00      	nop
 8003250:	3754      	adds	r7, #84	@ 0x54
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800325c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003260:	b0c0      	sub	sp, #256	@ 0x100
 8003262:	af00      	add	r7, sp, #0
 8003264:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003278:	68d9      	ldr	r1, [r3, #12]
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	ea40 0301 	orr.w	r3, r0, r1
 8003284:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	431a      	orrs	r2, r3
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	431a      	orrs	r2, r3
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80032b4:	f021 010c 	bic.w	r1, r1, #12
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032c2:	430b      	orrs	r3, r1
 80032c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80032d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d6:	6999      	ldr	r1, [r3, #24]
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	ea40 0301 	orr.w	r3, r0, r1
 80032e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4b8f      	ldr	r3, [pc, #572]	@ (8003528 <UART_SetConfig+0x2cc>)
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d005      	beq.n	80032fc <UART_SetConfig+0xa0>
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b8d      	ldr	r3, [pc, #564]	@ (800352c <UART_SetConfig+0x2d0>)
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d104      	bne.n	8003306 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032fc:	f7fe fe70 	bl	8001fe0 <HAL_RCC_GetPCLK2Freq>
 8003300:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003304:	e003      	b.n	800330e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003306:	f7fe fe57 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 800330a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800330e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003318:	f040 810c 	bne.w	8003534 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800331c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003320:	2200      	movs	r2, #0
 8003322:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003326:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800332a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800332e:	4622      	mov	r2, r4
 8003330:	462b      	mov	r3, r5
 8003332:	1891      	adds	r1, r2, r2
 8003334:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003336:	415b      	adcs	r3, r3
 8003338:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800333a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800333e:	4621      	mov	r1, r4
 8003340:	eb12 0801 	adds.w	r8, r2, r1
 8003344:	4629      	mov	r1, r5
 8003346:	eb43 0901 	adc.w	r9, r3, r1
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800335a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800335e:	4690      	mov	r8, r2
 8003360:	4699      	mov	r9, r3
 8003362:	4623      	mov	r3, r4
 8003364:	eb18 0303 	adds.w	r3, r8, r3
 8003368:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800336c:	462b      	mov	r3, r5
 800336e:	eb49 0303 	adc.w	r3, r9, r3
 8003372:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003382:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003386:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800338a:	460b      	mov	r3, r1
 800338c:	18db      	adds	r3, r3, r3
 800338e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003390:	4613      	mov	r3, r2
 8003392:	eb42 0303 	adc.w	r3, r2, r3
 8003396:	657b      	str	r3, [r7, #84]	@ 0x54
 8003398:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800339c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80033a0:	f7fc ff6e 	bl	8000280 <__aeabi_uldivmod>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4b61      	ldr	r3, [pc, #388]	@ (8003530 <UART_SetConfig+0x2d4>)
 80033aa:	fba3 2302 	umull	r2, r3, r3, r2
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	011c      	lsls	r4, r3, #4
 80033b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033b6:	2200      	movs	r2, #0
 80033b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80033c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80033c4:	4642      	mov	r2, r8
 80033c6:	464b      	mov	r3, r9
 80033c8:	1891      	adds	r1, r2, r2
 80033ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80033cc:	415b      	adcs	r3, r3
 80033ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033d4:	4641      	mov	r1, r8
 80033d6:	eb12 0a01 	adds.w	sl, r2, r1
 80033da:	4649      	mov	r1, r9
 80033dc:	eb43 0b01 	adc.w	fp, r3, r1
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033f4:	4692      	mov	sl, r2
 80033f6:	469b      	mov	fp, r3
 80033f8:	4643      	mov	r3, r8
 80033fa:	eb1a 0303 	adds.w	r3, sl, r3
 80033fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003402:	464b      	mov	r3, r9
 8003404:	eb4b 0303 	adc.w	r3, fp, r3
 8003408:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003418:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800341c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003420:	460b      	mov	r3, r1
 8003422:	18db      	adds	r3, r3, r3
 8003424:	643b      	str	r3, [r7, #64]	@ 0x40
 8003426:	4613      	mov	r3, r2
 8003428:	eb42 0303 	adc.w	r3, r2, r3
 800342c:	647b      	str	r3, [r7, #68]	@ 0x44
 800342e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003432:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003436:	f7fc ff23 	bl	8000280 <__aeabi_uldivmod>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4611      	mov	r1, r2
 8003440:	4b3b      	ldr	r3, [pc, #236]	@ (8003530 <UART_SetConfig+0x2d4>)
 8003442:	fba3 2301 	umull	r2, r3, r3, r1
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	2264      	movs	r2, #100	@ 0x64
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	1acb      	subs	r3, r1, r3
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003456:	4b36      	ldr	r3, [pc, #216]	@ (8003530 <UART_SetConfig+0x2d4>)
 8003458:	fba3 2302 	umull	r2, r3, r3, r2
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003464:	441c      	add	r4, r3
 8003466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800346a:	2200      	movs	r2, #0
 800346c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003470:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003474:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003478:	4642      	mov	r2, r8
 800347a:	464b      	mov	r3, r9
 800347c:	1891      	adds	r1, r2, r2
 800347e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003480:	415b      	adcs	r3, r3
 8003482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003484:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003488:	4641      	mov	r1, r8
 800348a:	1851      	adds	r1, r2, r1
 800348c:	6339      	str	r1, [r7, #48]	@ 0x30
 800348e:	4649      	mov	r1, r9
 8003490:	414b      	adcs	r3, r1
 8003492:	637b      	str	r3, [r7, #52]	@ 0x34
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80034a0:	4659      	mov	r1, fp
 80034a2:	00cb      	lsls	r3, r1, #3
 80034a4:	4651      	mov	r1, sl
 80034a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034aa:	4651      	mov	r1, sl
 80034ac:	00ca      	lsls	r2, r1, #3
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	4603      	mov	r3, r0
 80034b4:	4642      	mov	r2, r8
 80034b6:	189b      	adds	r3, r3, r2
 80034b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034bc:	464b      	mov	r3, r9
 80034be:	460a      	mov	r2, r1
 80034c0:	eb42 0303 	adc.w	r3, r2, r3
 80034c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80034d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034dc:	460b      	mov	r3, r1
 80034de:	18db      	adds	r3, r3, r3
 80034e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034e2:	4613      	mov	r3, r2
 80034e4:	eb42 0303 	adc.w	r3, r2, r3
 80034e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80034f2:	f7fc fec5 	bl	8000280 <__aeabi_uldivmod>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003530 <UART_SetConfig+0x2d4>)
 80034fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003500:	095b      	lsrs	r3, r3, #5
 8003502:	2164      	movs	r1, #100	@ 0x64
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	3332      	adds	r3, #50	@ 0x32
 800350e:	4a08      	ldr	r2, [pc, #32]	@ (8003530 <UART_SetConfig+0x2d4>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	f003 0207 	and.w	r2, r3, #7
 800351a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4422      	add	r2, r4
 8003522:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003524:	e106      	b.n	8003734 <UART_SetConfig+0x4d8>
 8003526:	bf00      	nop
 8003528:	40011000 	.word	0x40011000
 800352c:	40011400 	.word	0x40011400
 8003530:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003538:	2200      	movs	r2, #0
 800353a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800353e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003542:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003546:	4642      	mov	r2, r8
 8003548:	464b      	mov	r3, r9
 800354a:	1891      	adds	r1, r2, r2
 800354c:	6239      	str	r1, [r7, #32]
 800354e:	415b      	adcs	r3, r3
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24
 8003552:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003556:	4641      	mov	r1, r8
 8003558:	1854      	adds	r4, r2, r1
 800355a:	4649      	mov	r1, r9
 800355c:	eb43 0501 	adc.w	r5, r3, r1
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	00eb      	lsls	r3, r5, #3
 800356a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800356e:	00e2      	lsls	r2, r4, #3
 8003570:	4614      	mov	r4, r2
 8003572:	461d      	mov	r5, r3
 8003574:	4643      	mov	r3, r8
 8003576:	18e3      	adds	r3, r4, r3
 8003578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800357c:	464b      	mov	r3, r9
 800357e:	eb45 0303 	adc.w	r3, r5, r3
 8003582:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003592:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035a2:	4629      	mov	r1, r5
 80035a4:	008b      	lsls	r3, r1, #2
 80035a6:	4621      	mov	r1, r4
 80035a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035ac:	4621      	mov	r1, r4
 80035ae:	008a      	lsls	r2, r1, #2
 80035b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80035b4:	f7fc fe64 	bl	8000280 <__aeabi_uldivmod>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4b60      	ldr	r3, [pc, #384]	@ (8003740 <UART_SetConfig+0x4e4>)
 80035be:	fba3 2302 	umull	r2, r3, r3, r2
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	011c      	lsls	r4, r3, #4
 80035c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80035d8:	4642      	mov	r2, r8
 80035da:	464b      	mov	r3, r9
 80035dc:	1891      	adds	r1, r2, r2
 80035de:	61b9      	str	r1, [r7, #24]
 80035e0:	415b      	adcs	r3, r3
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035e8:	4641      	mov	r1, r8
 80035ea:	1851      	adds	r1, r2, r1
 80035ec:	6139      	str	r1, [r7, #16]
 80035ee:	4649      	mov	r1, r9
 80035f0:	414b      	adcs	r3, r1
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003600:	4659      	mov	r1, fp
 8003602:	00cb      	lsls	r3, r1, #3
 8003604:	4651      	mov	r1, sl
 8003606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800360a:	4651      	mov	r1, sl
 800360c:	00ca      	lsls	r2, r1, #3
 800360e:	4610      	mov	r0, r2
 8003610:	4619      	mov	r1, r3
 8003612:	4603      	mov	r3, r0
 8003614:	4642      	mov	r2, r8
 8003616:	189b      	adds	r3, r3, r2
 8003618:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800361c:	464b      	mov	r3, r9
 800361e:	460a      	mov	r2, r1
 8003620:	eb42 0303 	adc.w	r3, r2, r3
 8003624:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003632:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003640:	4649      	mov	r1, r9
 8003642:	008b      	lsls	r3, r1, #2
 8003644:	4641      	mov	r1, r8
 8003646:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800364a:	4641      	mov	r1, r8
 800364c:	008a      	lsls	r2, r1, #2
 800364e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003652:	f7fc fe15 	bl	8000280 <__aeabi_uldivmod>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4611      	mov	r1, r2
 800365c:	4b38      	ldr	r3, [pc, #224]	@ (8003740 <UART_SetConfig+0x4e4>)
 800365e:	fba3 2301 	umull	r2, r3, r3, r1
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	2264      	movs	r2, #100	@ 0x64
 8003666:	fb02 f303 	mul.w	r3, r2, r3
 800366a:	1acb      	subs	r3, r1, r3
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	3332      	adds	r3, #50	@ 0x32
 8003670:	4a33      	ldr	r2, [pc, #204]	@ (8003740 <UART_SetConfig+0x4e4>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800367c:	441c      	add	r4, r3
 800367e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003682:	2200      	movs	r2, #0
 8003684:	673b      	str	r3, [r7, #112]	@ 0x70
 8003686:	677a      	str	r2, [r7, #116]	@ 0x74
 8003688:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800368c:	4642      	mov	r2, r8
 800368e:	464b      	mov	r3, r9
 8003690:	1891      	adds	r1, r2, r2
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	415b      	adcs	r3, r3
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800369c:	4641      	mov	r1, r8
 800369e:	1851      	adds	r1, r2, r1
 80036a0:	6039      	str	r1, [r7, #0]
 80036a2:	4649      	mov	r1, r9
 80036a4:	414b      	adcs	r3, r1
 80036a6:	607b      	str	r3, [r7, #4]
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036b4:	4659      	mov	r1, fp
 80036b6:	00cb      	lsls	r3, r1, #3
 80036b8:	4651      	mov	r1, sl
 80036ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036be:	4651      	mov	r1, sl
 80036c0:	00ca      	lsls	r2, r1, #3
 80036c2:	4610      	mov	r0, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	4603      	mov	r3, r0
 80036c8:	4642      	mov	r2, r8
 80036ca:	189b      	adds	r3, r3, r2
 80036cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036ce:	464b      	mov	r3, r9
 80036d0:	460a      	mov	r2, r1
 80036d2:	eb42 0303 	adc.w	r3, r2, r3
 80036d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80036e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80036f0:	4649      	mov	r1, r9
 80036f2:	008b      	lsls	r3, r1, #2
 80036f4:	4641      	mov	r1, r8
 80036f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036fa:	4641      	mov	r1, r8
 80036fc:	008a      	lsls	r2, r1, #2
 80036fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003702:	f7fc fdbd 	bl	8000280 <__aeabi_uldivmod>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4b0d      	ldr	r3, [pc, #52]	@ (8003740 <UART_SetConfig+0x4e4>)
 800370c:	fba3 1302 	umull	r1, r3, r3, r2
 8003710:	095b      	lsrs	r3, r3, #5
 8003712:	2164      	movs	r1, #100	@ 0x64
 8003714:	fb01 f303 	mul.w	r3, r1, r3
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	3332      	adds	r3, #50	@ 0x32
 800371e:	4a08      	ldr	r2, [pc, #32]	@ (8003740 <UART_SetConfig+0x4e4>)
 8003720:	fba2 2303 	umull	r2, r3, r2, r3
 8003724:	095b      	lsrs	r3, r3, #5
 8003726:	f003 020f 	and.w	r2, r3, #15
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4422      	add	r2, r4
 8003732:	609a      	str	r2, [r3, #8]
}
 8003734:	bf00      	nop
 8003736:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800373a:	46bd      	mov	sp, r7
 800373c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003740:	51eb851f 	.word	0x51eb851f

08003744 <std>:
 8003744:	2300      	movs	r3, #0
 8003746:	b510      	push	{r4, lr}
 8003748:	4604      	mov	r4, r0
 800374a:	e9c0 3300 	strd	r3, r3, [r0]
 800374e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003752:	6083      	str	r3, [r0, #8]
 8003754:	8181      	strh	r1, [r0, #12]
 8003756:	6643      	str	r3, [r0, #100]	@ 0x64
 8003758:	81c2      	strh	r2, [r0, #14]
 800375a:	6183      	str	r3, [r0, #24]
 800375c:	4619      	mov	r1, r3
 800375e:	2208      	movs	r2, #8
 8003760:	305c      	adds	r0, #92	@ 0x5c
 8003762:	f000 f906 	bl	8003972 <memset>
 8003766:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <std+0x58>)
 8003768:	6263      	str	r3, [r4, #36]	@ 0x24
 800376a:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <std+0x5c>)
 800376c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800376e:	4b0d      	ldr	r3, [pc, #52]	@ (80037a4 <std+0x60>)
 8003770:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003772:	4b0d      	ldr	r3, [pc, #52]	@ (80037a8 <std+0x64>)
 8003774:	6323      	str	r3, [r4, #48]	@ 0x30
 8003776:	4b0d      	ldr	r3, [pc, #52]	@ (80037ac <std+0x68>)
 8003778:	6224      	str	r4, [r4, #32]
 800377a:	429c      	cmp	r4, r3
 800377c:	d006      	beq.n	800378c <std+0x48>
 800377e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003782:	4294      	cmp	r4, r2
 8003784:	d002      	beq.n	800378c <std+0x48>
 8003786:	33d0      	adds	r3, #208	@ 0xd0
 8003788:	429c      	cmp	r4, r3
 800378a:	d105      	bne.n	8003798 <std+0x54>
 800378c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003794:	f000 b966 	b.w	8003a64 <__retarget_lock_init_recursive>
 8003798:	bd10      	pop	{r4, pc}
 800379a:	bf00      	nop
 800379c:	080038ed 	.word	0x080038ed
 80037a0:	0800390f 	.word	0x0800390f
 80037a4:	08003947 	.word	0x08003947
 80037a8:	0800396b 	.word	0x0800396b
 80037ac:	20000140 	.word	0x20000140

080037b0 <stdio_exit_handler>:
 80037b0:	4a02      	ldr	r2, [pc, #8]	@ (80037bc <stdio_exit_handler+0xc>)
 80037b2:	4903      	ldr	r1, [pc, #12]	@ (80037c0 <stdio_exit_handler+0x10>)
 80037b4:	4803      	ldr	r0, [pc, #12]	@ (80037c4 <stdio_exit_handler+0x14>)
 80037b6:	f000 b869 	b.w	800388c <_fwalk_sglue>
 80037ba:	bf00      	nop
 80037bc:	2000000c 	.word	0x2000000c
 80037c0:	08004301 	.word	0x08004301
 80037c4:	2000001c 	.word	0x2000001c

080037c8 <cleanup_stdio>:
 80037c8:	6841      	ldr	r1, [r0, #4]
 80037ca:	4b0c      	ldr	r3, [pc, #48]	@ (80037fc <cleanup_stdio+0x34>)
 80037cc:	4299      	cmp	r1, r3
 80037ce:	b510      	push	{r4, lr}
 80037d0:	4604      	mov	r4, r0
 80037d2:	d001      	beq.n	80037d8 <cleanup_stdio+0x10>
 80037d4:	f000 fd94 	bl	8004300 <_fflush_r>
 80037d8:	68a1      	ldr	r1, [r4, #8]
 80037da:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <cleanup_stdio+0x38>)
 80037dc:	4299      	cmp	r1, r3
 80037de:	d002      	beq.n	80037e6 <cleanup_stdio+0x1e>
 80037e0:	4620      	mov	r0, r4
 80037e2:	f000 fd8d 	bl	8004300 <_fflush_r>
 80037e6:	68e1      	ldr	r1, [r4, #12]
 80037e8:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <cleanup_stdio+0x3c>)
 80037ea:	4299      	cmp	r1, r3
 80037ec:	d004      	beq.n	80037f8 <cleanup_stdio+0x30>
 80037ee:	4620      	mov	r0, r4
 80037f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037f4:	f000 bd84 	b.w	8004300 <_fflush_r>
 80037f8:	bd10      	pop	{r4, pc}
 80037fa:	bf00      	nop
 80037fc:	20000140 	.word	0x20000140
 8003800:	200001a8 	.word	0x200001a8
 8003804:	20000210 	.word	0x20000210

08003808 <global_stdio_init.part.0>:
 8003808:	b510      	push	{r4, lr}
 800380a:	4b0b      	ldr	r3, [pc, #44]	@ (8003838 <global_stdio_init.part.0+0x30>)
 800380c:	4c0b      	ldr	r4, [pc, #44]	@ (800383c <global_stdio_init.part.0+0x34>)
 800380e:	4a0c      	ldr	r2, [pc, #48]	@ (8003840 <global_stdio_init.part.0+0x38>)
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	4620      	mov	r0, r4
 8003814:	2200      	movs	r2, #0
 8003816:	2104      	movs	r1, #4
 8003818:	f7ff ff94 	bl	8003744 <std>
 800381c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003820:	2201      	movs	r2, #1
 8003822:	2109      	movs	r1, #9
 8003824:	f7ff ff8e 	bl	8003744 <std>
 8003828:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800382c:	2202      	movs	r2, #2
 800382e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003832:	2112      	movs	r1, #18
 8003834:	f7ff bf86 	b.w	8003744 <std>
 8003838:	20000278 	.word	0x20000278
 800383c:	20000140 	.word	0x20000140
 8003840:	080037b1 	.word	0x080037b1

08003844 <__sfp_lock_acquire>:
 8003844:	4801      	ldr	r0, [pc, #4]	@ (800384c <__sfp_lock_acquire+0x8>)
 8003846:	f000 b90e 	b.w	8003a66 <__retarget_lock_acquire_recursive>
 800384a:	bf00      	nop
 800384c:	20000281 	.word	0x20000281

08003850 <__sfp_lock_release>:
 8003850:	4801      	ldr	r0, [pc, #4]	@ (8003858 <__sfp_lock_release+0x8>)
 8003852:	f000 b909 	b.w	8003a68 <__retarget_lock_release_recursive>
 8003856:	bf00      	nop
 8003858:	20000281 	.word	0x20000281

0800385c <__sinit>:
 800385c:	b510      	push	{r4, lr}
 800385e:	4604      	mov	r4, r0
 8003860:	f7ff fff0 	bl	8003844 <__sfp_lock_acquire>
 8003864:	6a23      	ldr	r3, [r4, #32]
 8003866:	b11b      	cbz	r3, 8003870 <__sinit+0x14>
 8003868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800386c:	f7ff bff0 	b.w	8003850 <__sfp_lock_release>
 8003870:	4b04      	ldr	r3, [pc, #16]	@ (8003884 <__sinit+0x28>)
 8003872:	6223      	str	r3, [r4, #32]
 8003874:	4b04      	ldr	r3, [pc, #16]	@ (8003888 <__sinit+0x2c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1f5      	bne.n	8003868 <__sinit+0xc>
 800387c:	f7ff ffc4 	bl	8003808 <global_stdio_init.part.0>
 8003880:	e7f2      	b.n	8003868 <__sinit+0xc>
 8003882:	bf00      	nop
 8003884:	080037c9 	.word	0x080037c9
 8003888:	20000278 	.word	0x20000278

0800388c <_fwalk_sglue>:
 800388c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003890:	4607      	mov	r7, r0
 8003892:	4688      	mov	r8, r1
 8003894:	4614      	mov	r4, r2
 8003896:	2600      	movs	r6, #0
 8003898:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800389c:	f1b9 0901 	subs.w	r9, r9, #1
 80038a0:	d505      	bpl.n	80038ae <_fwalk_sglue+0x22>
 80038a2:	6824      	ldr	r4, [r4, #0]
 80038a4:	2c00      	cmp	r4, #0
 80038a6:	d1f7      	bne.n	8003898 <_fwalk_sglue+0xc>
 80038a8:	4630      	mov	r0, r6
 80038aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ae:	89ab      	ldrh	r3, [r5, #12]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d907      	bls.n	80038c4 <_fwalk_sglue+0x38>
 80038b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038b8:	3301      	adds	r3, #1
 80038ba:	d003      	beq.n	80038c4 <_fwalk_sglue+0x38>
 80038bc:	4629      	mov	r1, r5
 80038be:	4638      	mov	r0, r7
 80038c0:	47c0      	blx	r8
 80038c2:	4306      	orrs	r6, r0
 80038c4:	3568      	adds	r5, #104	@ 0x68
 80038c6:	e7e9      	b.n	800389c <_fwalk_sglue+0x10>

080038c8 <iprintf>:
 80038c8:	b40f      	push	{r0, r1, r2, r3}
 80038ca:	b507      	push	{r0, r1, r2, lr}
 80038cc:	4906      	ldr	r1, [pc, #24]	@ (80038e8 <iprintf+0x20>)
 80038ce:	ab04      	add	r3, sp, #16
 80038d0:	6808      	ldr	r0, [r1, #0]
 80038d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80038d6:	6881      	ldr	r1, [r0, #8]
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	f000 f9e9 	bl	8003cb0 <_vfiprintf_r>
 80038de:	b003      	add	sp, #12
 80038e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80038e4:	b004      	add	sp, #16
 80038e6:	4770      	bx	lr
 80038e8:	20000018 	.word	0x20000018

080038ec <__sread>:
 80038ec:	b510      	push	{r4, lr}
 80038ee:	460c      	mov	r4, r1
 80038f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038f4:	f000 f868 	bl	80039c8 <_read_r>
 80038f8:	2800      	cmp	r0, #0
 80038fa:	bfab      	itete	ge
 80038fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80038fe:	89a3      	ldrhlt	r3, [r4, #12]
 8003900:	181b      	addge	r3, r3, r0
 8003902:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003906:	bfac      	ite	ge
 8003908:	6563      	strge	r3, [r4, #84]	@ 0x54
 800390a:	81a3      	strhlt	r3, [r4, #12]
 800390c:	bd10      	pop	{r4, pc}

0800390e <__swrite>:
 800390e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003912:	461f      	mov	r7, r3
 8003914:	898b      	ldrh	r3, [r1, #12]
 8003916:	05db      	lsls	r3, r3, #23
 8003918:	4605      	mov	r5, r0
 800391a:	460c      	mov	r4, r1
 800391c:	4616      	mov	r6, r2
 800391e:	d505      	bpl.n	800392c <__swrite+0x1e>
 8003920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003924:	2302      	movs	r3, #2
 8003926:	2200      	movs	r2, #0
 8003928:	f000 f83c 	bl	80039a4 <_lseek_r>
 800392c:	89a3      	ldrh	r3, [r4, #12]
 800392e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003932:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003936:	81a3      	strh	r3, [r4, #12]
 8003938:	4632      	mov	r2, r6
 800393a:	463b      	mov	r3, r7
 800393c:	4628      	mov	r0, r5
 800393e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003942:	f000 b853 	b.w	80039ec <_write_r>

08003946 <__sseek>:
 8003946:	b510      	push	{r4, lr}
 8003948:	460c      	mov	r4, r1
 800394a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800394e:	f000 f829 	bl	80039a4 <_lseek_r>
 8003952:	1c43      	adds	r3, r0, #1
 8003954:	89a3      	ldrh	r3, [r4, #12]
 8003956:	bf15      	itete	ne
 8003958:	6560      	strne	r0, [r4, #84]	@ 0x54
 800395a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800395e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003962:	81a3      	strheq	r3, [r4, #12]
 8003964:	bf18      	it	ne
 8003966:	81a3      	strhne	r3, [r4, #12]
 8003968:	bd10      	pop	{r4, pc}

0800396a <__sclose>:
 800396a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800396e:	f000 b809 	b.w	8003984 <_close_r>

08003972 <memset>:
 8003972:	4402      	add	r2, r0
 8003974:	4603      	mov	r3, r0
 8003976:	4293      	cmp	r3, r2
 8003978:	d100      	bne.n	800397c <memset+0xa>
 800397a:	4770      	bx	lr
 800397c:	f803 1b01 	strb.w	r1, [r3], #1
 8003980:	e7f9      	b.n	8003976 <memset+0x4>
	...

08003984 <_close_r>:
 8003984:	b538      	push	{r3, r4, r5, lr}
 8003986:	4d06      	ldr	r5, [pc, #24]	@ (80039a0 <_close_r+0x1c>)
 8003988:	2300      	movs	r3, #0
 800398a:	4604      	mov	r4, r0
 800398c:	4608      	mov	r0, r1
 800398e:	602b      	str	r3, [r5, #0]
 8003990:	f7fd faf5 	bl	8000f7e <_close>
 8003994:	1c43      	adds	r3, r0, #1
 8003996:	d102      	bne.n	800399e <_close_r+0x1a>
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	b103      	cbz	r3, 800399e <_close_r+0x1a>
 800399c:	6023      	str	r3, [r4, #0]
 800399e:	bd38      	pop	{r3, r4, r5, pc}
 80039a0:	2000027c 	.word	0x2000027c

080039a4 <_lseek_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	4d07      	ldr	r5, [pc, #28]	@ (80039c4 <_lseek_r+0x20>)
 80039a8:	4604      	mov	r4, r0
 80039aa:	4608      	mov	r0, r1
 80039ac:	4611      	mov	r1, r2
 80039ae:	2200      	movs	r2, #0
 80039b0:	602a      	str	r2, [r5, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	f7fd fb0a 	bl	8000fcc <_lseek>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d102      	bne.n	80039c2 <_lseek_r+0x1e>
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	b103      	cbz	r3, 80039c2 <_lseek_r+0x1e>
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	bd38      	pop	{r3, r4, r5, pc}
 80039c4:	2000027c 	.word	0x2000027c

080039c8 <_read_r>:
 80039c8:	b538      	push	{r3, r4, r5, lr}
 80039ca:	4d07      	ldr	r5, [pc, #28]	@ (80039e8 <_read_r+0x20>)
 80039cc:	4604      	mov	r4, r0
 80039ce:	4608      	mov	r0, r1
 80039d0:	4611      	mov	r1, r2
 80039d2:	2200      	movs	r2, #0
 80039d4:	602a      	str	r2, [r5, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	f7fd fab4 	bl	8000f44 <_read>
 80039dc:	1c43      	adds	r3, r0, #1
 80039de:	d102      	bne.n	80039e6 <_read_r+0x1e>
 80039e0:	682b      	ldr	r3, [r5, #0]
 80039e2:	b103      	cbz	r3, 80039e6 <_read_r+0x1e>
 80039e4:	6023      	str	r3, [r4, #0]
 80039e6:	bd38      	pop	{r3, r4, r5, pc}
 80039e8:	2000027c 	.word	0x2000027c

080039ec <_write_r>:
 80039ec:	b538      	push	{r3, r4, r5, lr}
 80039ee:	4d07      	ldr	r5, [pc, #28]	@ (8003a0c <_write_r+0x20>)
 80039f0:	4604      	mov	r4, r0
 80039f2:	4608      	mov	r0, r1
 80039f4:	4611      	mov	r1, r2
 80039f6:	2200      	movs	r2, #0
 80039f8:	602a      	str	r2, [r5, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	f7fc fdd6 	bl	80005ac <_write>
 8003a00:	1c43      	adds	r3, r0, #1
 8003a02:	d102      	bne.n	8003a0a <_write_r+0x1e>
 8003a04:	682b      	ldr	r3, [r5, #0]
 8003a06:	b103      	cbz	r3, 8003a0a <_write_r+0x1e>
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	bd38      	pop	{r3, r4, r5, pc}
 8003a0c:	2000027c 	.word	0x2000027c

08003a10 <__errno>:
 8003a10:	4b01      	ldr	r3, [pc, #4]	@ (8003a18 <__errno+0x8>)
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000018 	.word	0x20000018

08003a1c <__libc_init_array>:
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	4d0d      	ldr	r5, [pc, #52]	@ (8003a54 <__libc_init_array+0x38>)
 8003a20:	4c0d      	ldr	r4, [pc, #52]	@ (8003a58 <__libc_init_array+0x3c>)
 8003a22:	1b64      	subs	r4, r4, r5
 8003a24:	10a4      	asrs	r4, r4, #2
 8003a26:	2600      	movs	r6, #0
 8003a28:	42a6      	cmp	r6, r4
 8003a2a:	d109      	bne.n	8003a40 <__libc_init_array+0x24>
 8003a2c:	4d0b      	ldr	r5, [pc, #44]	@ (8003a5c <__libc_init_array+0x40>)
 8003a2e:	4c0c      	ldr	r4, [pc, #48]	@ (8003a60 <__libc_init_array+0x44>)
 8003a30:	f000 fdb6 	bl	80045a0 <_init>
 8003a34:	1b64      	subs	r4, r4, r5
 8003a36:	10a4      	asrs	r4, r4, #2
 8003a38:	2600      	movs	r6, #0
 8003a3a:	42a6      	cmp	r6, r4
 8003a3c:	d105      	bne.n	8003a4a <__libc_init_array+0x2e>
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a44:	4798      	blx	r3
 8003a46:	3601      	adds	r6, #1
 8003a48:	e7ee      	b.n	8003a28 <__libc_init_array+0xc>
 8003a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4e:	4798      	blx	r3
 8003a50:	3601      	adds	r6, #1
 8003a52:	e7f2      	b.n	8003a3a <__libc_init_array+0x1e>
 8003a54:	08004620 	.word	0x08004620
 8003a58:	08004620 	.word	0x08004620
 8003a5c:	08004620 	.word	0x08004620
 8003a60:	08004624 	.word	0x08004624

08003a64 <__retarget_lock_init_recursive>:
 8003a64:	4770      	bx	lr

08003a66 <__retarget_lock_acquire_recursive>:
 8003a66:	4770      	bx	lr

08003a68 <__retarget_lock_release_recursive>:
 8003a68:	4770      	bx	lr
	...

08003a6c <_free_r>:
 8003a6c:	b538      	push	{r3, r4, r5, lr}
 8003a6e:	4605      	mov	r5, r0
 8003a70:	2900      	cmp	r1, #0
 8003a72:	d041      	beq.n	8003af8 <_free_r+0x8c>
 8003a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a78:	1f0c      	subs	r4, r1, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	bfb8      	it	lt
 8003a7e:	18e4      	addlt	r4, r4, r3
 8003a80:	f000 f8e0 	bl	8003c44 <__malloc_lock>
 8003a84:	4a1d      	ldr	r2, [pc, #116]	@ (8003afc <_free_r+0x90>)
 8003a86:	6813      	ldr	r3, [r2, #0]
 8003a88:	b933      	cbnz	r3, 8003a98 <_free_r+0x2c>
 8003a8a:	6063      	str	r3, [r4, #4]
 8003a8c:	6014      	str	r4, [r2, #0]
 8003a8e:	4628      	mov	r0, r5
 8003a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a94:	f000 b8dc 	b.w	8003c50 <__malloc_unlock>
 8003a98:	42a3      	cmp	r3, r4
 8003a9a:	d908      	bls.n	8003aae <_free_r+0x42>
 8003a9c:	6820      	ldr	r0, [r4, #0]
 8003a9e:	1821      	adds	r1, r4, r0
 8003aa0:	428b      	cmp	r3, r1
 8003aa2:	bf01      	itttt	eq
 8003aa4:	6819      	ldreq	r1, [r3, #0]
 8003aa6:	685b      	ldreq	r3, [r3, #4]
 8003aa8:	1809      	addeq	r1, r1, r0
 8003aaa:	6021      	streq	r1, [r4, #0]
 8003aac:	e7ed      	b.n	8003a8a <_free_r+0x1e>
 8003aae:	461a      	mov	r2, r3
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	b10b      	cbz	r3, 8003ab8 <_free_r+0x4c>
 8003ab4:	42a3      	cmp	r3, r4
 8003ab6:	d9fa      	bls.n	8003aae <_free_r+0x42>
 8003ab8:	6811      	ldr	r1, [r2, #0]
 8003aba:	1850      	adds	r0, r2, r1
 8003abc:	42a0      	cmp	r0, r4
 8003abe:	d10b      	bne.n	8003ad8 <_free_r+0x6c>
 8003ac0:	6820      	ldr	r0, [r4, #0]
 8003ac2:	4401      	add	r1, r0
 8003ac4:	1850      	adds	r0, r2, r1
 8003ac6:	4283      	cmp	r3, r0
 8003ac8:	6011      	str	r1, [r2, #0]
 8003aca:	d1e0      	bne.n	8003a8e <_free_r+0x22>
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	6053      	str	r3, [r2, #4]
 8003ad2:	4408      	add	r0, r1
 8003ad4:	6010      	str	r0, [r2, #0]
 8003ad6:	e7da      	b.n	8003a8e <_free_r+0x22>
 8003ad8:	d902      	bls.n	8003ae0 <_free_r+0x74>
 8003ada:	230c      	movs	r3, #12
 8003adc:	602b      	str	r3, [r5, #0]
 8003ade:	e7d6      	b.n	8003a8e <_free_r+0x22>
 8003ae0:	6820      	ldr	r0, [r4, #0]
 8003ae2:	1821      	adds	r1, r4, r0
 8003ae4:	428b      	cmp	r3, r1
 8003ae6:	bf04      	itt	eq
 8003ae8:	6819      	ldreq	r1, [r3, #0]
 8003aea:	685b      	ldreq	r3, [r3, #4]
 8003aec:	6063      	str	r3, [r4, #4]
 8003aee:	bf04      	itt	eq
 8003af0:	1809      	addeq	r1, r1, r0
 8003af2:	6021      	streq	r1, [r4, #0]
 8003af4:	6054      	str	r4, [r2, #4]
 8003af6:	e7ca      	b.n	8003a8e <_free_r+0x22>
 8003af8:	bd38      	pop	{r3, r4, r5, pc}
 8003afa:	bf00      	nop
 8003afc:	20000288 	.word	0x20000288

08003b00 <sbrk_aligned>:
 8003b00:	b570      	push	{r4, r5, r6, lr}
 8003b02:	4e0f      	ldr	r6, [pc, #60]	@ (8003b40 <sbrk_aligned+0x40>)
 8003b04:	460c      	mov	r4, r1
 8003b06:	6831      	ldr	r1, [r6, #0]
 8003b08:	4605      	mov	r5, r0
 8003b0a:	b911      	cbnz	r1, 8003b12 <sbrk_aligned+0x12>
 8003b0c:	f000 fcb4 	bl	8004478 <_sbrk_r>
 8003b10:	6030      	str	r0, [r6, #0]
 8003b12:	4621      	mov	r1, r4
 8003b14:	4628      	mov	r0, r5
 8003b16:	f000 fcaf 	bl	8004478 <_sbrk_r>
 8003b1a:	1c43      	adds	r3, r0, #1
 8003b1c:	d103      	bne.n	8003b26 <sbrk_aligned+0x26>
 8003b1e:	f04f 34ff 	mov.w	r4, #4294967295
 8003b22:	4620      	mov	r0, r4
 8003b24:	bd70      	pop	{r4, r5, r6, pc}
 8003b26:	1cc4      	adds	r4, r0, #3
 8003b28:	f024 0403 	bic.w	r4, r4, #3
 8003b2c:	42a0      	cmp	r0, r4
 8003b2e:	d0f8      	beq.n	8003b22 <sbrk_aligned+0x22>
 8003b30:	1a21      	subs	r1, r4, r0
 8003b32:	4628      	mov	r0, r5
 8003b34:	f000 fca0 	bl	8004478 <_sbrk_r>
 8003b38:	3001      	adds	r0, #1
 8003b3a:	d1f2      	bne.n	8003b22 <sbrk_aligned+0x22>
 8003b3c:	e7ef      	b.n	8003b1e <sbrk_aligned+0x1e>
 8003b3e:	bf00      	nop
 8003b40:	20000284 	.word	0x20000284

08003b44 <_malloc_r>:
 8003b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b48:	1ccd      	adds	r5, r1, #3
 8003b4a:	f025 0503 	bic.w	r5, r5, #3
 8003b4e:	3508      	adds	r5, #8
 8003b50:	2d0c      	cmp	r5, #12
 8003b52:	bf38      	it	cc
 8003b54:	250c      	movcc	r5, #12
 8003b56:	2d00      	cmp	r5, #0
 8003b58:	4606      	mov	r6, r0
 8003b5a:	db01      	blt.n	8003b60 <_malloc_r+0x1c>
 8003b5c:	42a9      	cmp	r1, r5
 8003b5e:	d904      	bls.n	8003b6a <_malloc_r+0x26>
 8003b60:	230c      	movs	r3, #12
 8003b62:	6033      	str	r3, [r6, #0]
 8003b64:	2000      	movs	r0, #0
 8003b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c40 <_malloc_r+0xfc>
 8003b6e:	f000 f869 	bl	8003c44 <__malloc_lock>
 8003b72:	f8d8 3000 	ldr.w	r3, [r8]
 8003b76:	461c      	mov	r4, r3
 8003b78:	bb44      	cbnz	r4, 8003bcc <_malloc_r+0x88>
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	4630      	mov	r0, r6
 8003b7e:	f7ff ffbf 	bl	8003b00 <sbrk_aligned>
 8003b82:	1c43      	adds	r3, r0, #1
 8003b84:	4604      	mov	r4, r0
 8003b86:	d158      	bne.n	8003c3a <_malloc_r+0xf6>
 8003b88:	f8d8 4000 	ldr.w	r4, [r8]
 8003b8c:	4627      	mov	r7, r4
 8003b8e:	2f00      	cmp	r7, #0
 8003b90:	d143      	bne.n	8003c1a <_malloc_r+0xd6>
 8003b92:	2c00      	cmp	r4, #0
 8003b94:	d04b      	beq.n	8003c2e <_malloc_r+0xea>
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	4639      	mov	r1, r7
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	eb04 0903 	add.w	r9, r4, r3
 8003ba0:	f000 fc6a 	bl	8004478 <_sbrk_r>
 8003ba4:	4581      	cmp	r9, r0
 8003ba6:	d142      	bne.n	8003c2e <_malloc_r+0xea>
 8003ba8:	6821      	ldr	r1, [r4, #0]
 8003baa:	1a6d      	subs	r5, r5, r1
 8003bac:	4629      	mov	r1, r5
 8003bae:	4630      	mov	r0, r6
 8003bb0:	f7ff ffa6 	bl	8003b00 <sbrk_aligned>
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	d03a      	beq.n	8003c2e <_malloc_r+0xea>
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	442b      	add	r3, r5
 8003bbc:	6023      	str	r3, [r4, #0]
 8003bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	bb62      	cbnz	r2, 8003c20 <_malloc_r+0xdc>
 8003bc6:	f8c8 7000 	str.w	r7, [r8]
 8003bca:	e00f      	b.n	8003bec <_malloc_r+0xa8>
 8003bcc:	6822      	ldr	r2, [r4, #0]
 8003bce:	1b52      	subs	r2, r2, r5
 8003bd0:	d420      	bmi.n	8003c14 <_malloc_r+0xd0>
 8003bd2:	2a0b      	cmp	r2, #11
 8003bd4:	d917      	bls.n	8003c06 <_malloc_r+0xc2>
 8003bd6:	1961      	adds	r1, r4, r5
 8003bd8:	42a3      	cmp	r3, r4
 8003bda:	6025      	str	r5, [r4, #0]
 8003bdc:	bf18      	it	ne
 8003bde:	6059      	strne	r1, [r3, #4]
 8003be0:	6863      	ldr	r3, [r4, #4]
 8003be2:	bf08      	it	eq
 8003be4:	f8c8 1000 	streq.w	r1, [r8]
 8003be8:	5162      	str	r2, [r4, r5]
 8003bea:	604b      	str	r3, [r1, #4]
 8003bec:	4630      	mov	r0, r6
 8003bee:	f000 f82f 	bl	8003c50 <__malloc_unlock>
 8003bf2:	f104 000b 	add.w	r0, r4, #11
 8003bf6:	1d23      	adds	r3, r4, #4
 8003bf8:	f020 0007 	bic.w	r0, r0, #7
 8003bfc:	1ac2      	subs	r2, r0, r3
 8003bfe:	bf1c      	itt	ne
 8003c00:	1a1b      	subne	r3, r3, r0
 8003c02:	50a3      	strne	r3, [r4, r2]
 8003c04:	e7af      	b.n	8003b66 <_malloc_r+0x22>
 8003c06:	6862      	ldr	r2, [r4, #4]
 8003c08:	42a3      	cmp	r3, r4
 8003c0a:	bf0c      	ite	eq
 8003c0c:	f8c8 2000 	streq.w	r2, [r8]
 8003c10:	605a      	strne	r2, [r3, #4]
 8003c12:	e7eb      	b.n	8003bec <_malloc_r+0xa8>
 8003c14:	4623      	mov	r3, r4
 8003c16:	6864      	ldr	r4, [r4, #4]
 8003c18:	e7ae      	b.n	8003b78 <_malloc_r+0x34>
 8003c1a:	463c      	mov	r4, r7
 8003c1c:	687f      	ldr	r7, [r7, #4]
 8003c1e:	e7b6      	b.n	8003b8e <_malloc_r+0x4a>
 8003c20:	461a      	mov	r2, r3
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	42a3      	cmp	r3, r4
 8003c26:	d1fb      	bne.n	8003c20 <_malloc_r+0xdc>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	6053      	str	r3, [r2, #4]
 8003c2c:	e7de      	b.n	8003bec <_malloc_r+0xa8>
 8003c2e:	230c      	movs	r3, #12
 8003c30:	6033      	str	r3, [r6, #0]
 8003c32:	4630      	mov	r0, r6
 8003c34:	f000 f80c 	bl	8003c50 <__malloc_unlock>
 8003c38:	e794      	b.n	8003b64 <_malloc_r+0x20>
 8003c3a:	6005      	str	r5, [r0, #0]
 8003c3c:	e7d6      	b.n	8003bec <_malloc_r+0xa8>
 8003c3e:	bf00      	nop
 8003c40:	20000288 	.word	0x20000288

08003c44 <__malloc_lock>:
 8003c44:	4801      	ldr	r0, [pc, #4]	@ (8003c4c <__malloc_lock+0x8>)
 8003c46:	f7ff bf0e 	b.w	8003a66 <__retarget_lock_acquire_recursive>
 8003c4a:	bf00      	nop
 8003c4c:	20000280 	.word	0x20000280

08003c50 <__malloc_unlock>:
 8003c50:	4801      	ldr	r0, [pc, #4]	@ (8003c58 <__malloc_unlock+0x8>)
 8003c52:	f7ff bf09 	b.w	8003a68 <__retarget_lock_release_recursive>
 8003c56:	bf00      	nop
 8003c58:	20000280 	.word	0x20000280

08003c5c <__sfputc_r>:
 8003c5c:	6893      	ldr	r3, [r2, #8]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	b410      	push	{r4}
 8003c64:	6093      	str	r3, [r2, #8]
 8003c66:	da08      	bge.n	8003c7a <__sfputc_r+0x1e>
 8003c68:	6994      	ldr	r4, [r2, #24]
 8003c6a:	42a3      	cmp	r3, r4
 8003c6c:	db01      	blt.n	8003c72 <__sfputc_r+0x16>
 8003c6e:	290a      	cmp	r1, #10
 8003c70:	d103      	bne.n	8003c7a <__sfputc_r+0x1e>
 8003c72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c76:	f000 bb6b 	b.w	8004350 <__swbuf_r>
 8003c7a:	6813      	ldr	r3, [r2, #0]
 8003c7c:	1c58      	adds	r0, r3, #1
 8003c7e:	6010      	str	r0, [r2, #0]
 8003c80:	7019      	strb	r1, [r3, #0]
 8003c82:	4608      	mov	r0, r1
 8003c84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <__sfputs_r>:
 8003c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8c:	4606      	mov	r6, r0
 8003c8e:	460f      	mov	r7, r1
 8003c90:	4614      	mov	r4, r2
 8003c92:	18d5      	adds	r5, r2, r3
 8003c94:	42ac      	cmp	r4, r5
 8003c96:	d101      	bne.n	8003c9c <__sfputs_r+0x12>
 8003c98:	2000      	movs	r0, #0
 8003c9a:	e007      	b.n	8003cac <__sfputs_r+0x22>
 8003c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ca0:	463a      	mov	r2, r7
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	f7ff ffda 	bl	8003c5c <__sfputc_r>
 8003ca8:	1c43      	adds	r3, r0, #1
 8003caa:	d1f3      	bne.n	8003c94 <__sfputs_r+0xa>
 8003cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cb0 <_vfiprintf_r>:
 8003cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb4:	460d      	mov	r5, r1
 8003cb6:	b09d      	sub	sp, #116	@ 0x74
 8003cb8:	4614      	mov	r4, r2
 8003cba:	4698      	mov	r8, r3
 8003cbc:	4606      	mov	r6, r0
 8003cbe:	b118      	cbz	r0, 8003cc8 <_vfiprintf_r+0x18>
 8003cc0:	6a03      	ldr	r3, [r0, #32]
 8003cc2:	b90b      	cbnz	r3, 8003cc8 <_vfiprintf_r+0x18>
 8003cc4:	f7ff fdca 	bl	800385c <__sinit>
 8003cc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003cca:	07d9      	lsls	r1, r3, #31
 8003ccc:	d405      	bmi.n	8003cda <_vfiprintf_r+0x2a>
 8003cce:	89ab      	ldrh	r3, [r5, #12]
 8003cd0:	059a      	lsls	r2, r3, #22
 8003cd2:	d402      	bmi.n	8003cda <_vfiprintf_r+0x2a>
 8003cd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003cd6:	f7ff fec6 	bl	8003a66 <__retarget_lock_acquire_recursive>
 8003cda:	89ab      	ldrh	r3, [r5, #12]
 8003cdc:	071b      	lsls	r3, r3, #28
 8003cde:	d501      	bpl.n	8003ce4 <_vfiprintf_r+0x34>
 8003ce0:	692b      	ldr	r3, [r5, #16]
 8003ce2:	b99b      	cbnz	r3, 8003d0c <_vfiprintf_r+0x5c>
 8003ce4:	4629      	mov	r1, r5
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	f000 fb70 	bl	80043cc <__swsetup_r>
 8003cec:	b170      	cbz	r0, 8003d0c <_vfiprintf_r+0x5c>
 8003cee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003cf0:	07dc      	lsls	r4, r3, #31
 8003cf2:	d504      	bpl.n	8003cfe <_vfiprintf_r+0x4e>
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf8:	b01d      	add	sp, #116	@ 0x74
 8003cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cfe:	89ab      	ldrh	r3, [r5, #12]
 8003d00:	0598      	lsls	r0, r3, #22
 8003d02:	d4f7      	bmi.n	8003cf4 <_vfiprintf_r+0x44>
 8003d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d06:	f7ff feaf 	bl	8003a68 <__retarget_lock_release_recursive>
 8003d0a:	e7f3      	b.n	8003cf4 <_vfiprintf_r+0x44>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d10:	2320      	movs	r3, #32
 8003d12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d16:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d1a:	2330      	movs	r3, #48	@ 0x30
 8003d1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003ecc <_vfiprintf_r+0x21c>
 8003d20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d24:	f04f 0901 	mov.w	r9, #1
 8003d28:	4623      	mov	r3, r4
 8003d2a:	469a      	mov	sl, r3
 8003d2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d30:	b10a      	cbz	r2, 8003d36 <_vfiprintf_r+0x86>
 8003d32:	2a25      	cmp	r2, #37	@ 0x25
 8003d34:	d1f9      	bne.n	8003d2a <_vfiprintf_r+0x7a>
 8003d36:	ebba 0b04 	subs.w	fp, sl, r4
 8003d3a:	d00b      	beq.n	8003d54 <_vfiprintf_r+0xa4>
 8003d3c:	465b      	mov	r3, fp
 8003d3e:	4622      	mov	r2, r4
 8003d40:	4629      	mov	r1, r5
 8003d42:	4630      	mov	r0, r6
 8003d44:	f7ff ffa1 	bl	8003c8a <__sfputs_r>
 8003d48:	3001      	adds	r0, #1
 8003d4a:	f000 80a7 	beq.w	8003e9c <_vfiprintf_r+0x1ec>
 8003d4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d50:	445a      	add	r2, fp
 8003d52:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d54:	f89a 3000 	ldrb.w	r3, [sl]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 809f 	beq.w	8003e9c <_vfiprintf_r+0x1ec>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f04f 32ff 	mov.w	r2, #4294967295
 8003d64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d68:	f10a 0a01 	add.w	sl, sl, #1
 8003d6c:	9304      	str	r3, [sp, #16]
 8003d6e:	9307      	str	r3, [sp, #28]
 8003d70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d74:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d76:	4654      	mov	r4, sl
 8003d78:	2205      	movs	r2, #5
 8003d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d7e:	4853      	ldr	r0, [pc, #332]	@ (8003ecc <_vfiprintf_r+0x21c>)
 8003d80:	f7fc fa2e 	bl	80001e0 <memchr>
 8003d84:	9a04      	ldr	r2, [sp, #16]
 8003d86:	b9d8      	cbnz	r0, 8003dc0 <_vfiprintf_r+0x110>
 8003d88:	06d1      	lsls	r1, r2, #27
 8003d8a:	bf44      	itt	mi
 8003d8c:	2320      	movmi	r3, #32
 8003d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d92:	0713      	lsls	r3, r2, #28
 8003d94:	bf44      	itt	mi
 8003d96:	232b      	movmi	r3, #43	@ 0x2b
 8003d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8003da0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003da2:	d015      	beq.n	8003dd0 <_vfiprintf_r+0x120>
 8003da4:	9a07      	ldr	r2, [sp, #28]
 8003da6:	4654      	mov	r4, sl
 8003da8:	2000      	movs	r0, #0
 8003daa:	f04f 0c0a 	mov.w	ip, #10
 8003dae:	4621      	mov	r1, r4
 8003db0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003db4:	3b30      	subs	r3, #48	@ 0x30
 8003db6:	2b09      	cmp	r3, #9
 8003db8:	d94b      	bls.n	8003e52 <_vfiprintf_r+0x1a2>
 8003dba:	b1b0      	cbz	r0, 8003dea <_vfiprintf_r+0x13a>
 8003dbc:	9207      	str	r2, [sp, #28]
 8003dbe:	e014      	b.n	8003dea <_vfiprintf_r+0x13a>
 8003dc0:	eba0 0308 	sub.w	r3, r0, r8
 8003dc4:	fa09 f303 	lsl.w	r3, r9, r3
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	9304      	str	r3, [sp, #16]
 8003dcc:	46a2      	mov	sl, r4
 8003dce:	e7d2      	b.n	8003d76 <_vfiprintf_r+0xc6>
 8003dd0:	9b03      	ldr	r3, [sp, #12]
 8003dd2:	1d19      	adds	r1, r3, #4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	9103      	str	r1, [sp, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bfbb      	ittet	lt
 8003ddc:	425b      	neglt	r3, r3
 8003dde:	f042 0202 	orrlt.w	r2, r2, #2
 8003de2:	9307      	strge	r3, [sp, #28]
 8003de4:	9307      	strlt	r3, [sp, #28]
 8003de6:	bfb8      	it	lt
 8003de8:	9204      	strlt	r2, [sp, #16]
 8003dea:	7823      	ldrb	r3, [r4, #0]
 8003dec:	2b2e      	cmp	r3, #46	@ 0x2e
 8003dee:	d10a      	bne.n	8003e06 <_vfiprintf_r+0x156>
 8003df0:	7863      	ldrb	r3, [r4, #1]
 8003df2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003df4:	d132      	bne.n	8003e5c <_vfiprintf_r+0x1ac>
 8003df6:	9b03      	ldr	r3, [sp, #12]
 8003df8:	1d1a      	adds	r2, r3, #4
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	9203      	str	r2, [sp, #12]
 8003dfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e02:	3402      	adds	r4, #2
 8003e04:	9305      	str	r3, [sp, #20]
 8003e06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003edc <_vfiprintf_r+0x22c>
 8003e0a:	7821      	ldrb	r1, [r4, #0]
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	4650      	mov	r0, sl
 8003e10:	f7fc f9e6 	bl	80001e0 <memchr>
 8003e14:	b138      	cbz	r0, 8003e26 <_vfiprintf_r+0x176>
 8003e16:	9b04      	ldr	r3, [sp, #16]
 8003e18:	eba0 000a 	sub.w	r0, r0, sl
 8003e1c:	2240      	movs	r2, #64	@ 0x40
 8003e1e:	4082      	lsls	r2, r0
 8003e20:	4313      	orrs	r3, r2
 8003e22:	3401      	adds	r4, #1
 8003e24:	9304      	str	r3, [sp, #16]
 8003e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e2a:	4829      	ldr	r0, [pc, #164]	@ (8003ed0 <_vfiprintf_r+0x220>)
 8003e2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e30:	2206      	movs	r2, #6
 8003e32:	f7fc f9d5 	bl	80001e0 <memchr>
 8003e36:	2800      	cmp	r0, #0
 8003e38:	d03f      	beq.n	8003eba <_vfiprintf_r+0x20a>
 8003e3a:	4b26      	ldr	r3, [pc, #152]	@ (8003ed4 <_vfiprintf_r+0x224>)
 8003e3c:	bb1b      	cbnz	r3, 8003e86 <_vfiprintf_r+0x1d6>
 8003e3e:	9b03      	ldr	r3, [sp, #12]
 8003e40:	3307      	adds	r3, #7
 8003e42:	f023 0307 	bic.w	r3, r3, #7
 8003e46:	3308      	adds	r3, #8
 8003e48:	9303      	str	r3, [sp, #12]
 8003e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e4c:	443b      	add	r3, r7
 8003e4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e50:	e76a      	b.n	8003d28 <_vfiprintf_r+0x78>
 8003e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e56:	460c      	mov	r4, r1
 8003e58:	2001      	movs	r0, #1
 8003e5a:	e7a8      	b.n	8003dae <_vfiprintf_r+0xfe>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	3401      	adds	r4, #1
 8003e60:	9305      	str	r3, [sp, #20]
 8003e62:	4619      	mov	r1, r3
 8003e64:	f04f 0c0a 	mov.w	ip, #10
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e6e:	3a30      	subs	r2, #48	@ 0x30
 8003e70:	2a09      	cmp	r2, #9
 8003e72:	d903      	bls.n	8003e7c <_vfiprintf_r+0x1cc>
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0c6      	beq.n	8003e06 <_vfiprintf_r+0x156>
 8003e78:	9105      	str	r1, [sp, #20]
 8003e7a:	e7c4      	b.n	8003e06 <_vfiprintf_r+0x156>
 8003e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e80:	4604      	mov	r4, r0
 8003e82:	2301      	movs	r3, #1
 8003e84:	e7f0      	b.n	8003e68 <_vfiprintf_r+0x1b8>
 8003e86:	ab03      	add	r3, sp, #12
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	462a      	mov	r2, r5
 8003e8c:	4b12      	ldr	r3, [pc, #72]	@ (8003ed8 <_vfiprintf_r+0x228>)
 8003e8e:	a904      	add	r1, sp, #16
 8003e90:	4630      	mov	r0, r6
 8003e92:	f3af 8000 	nop.w
 8003e96:	4607      	mov	r7, r0
 8003e98:	1c78      	adds	r0, r7, #1
 8003e9a:	d1d6      	bne.n	8003e4a <_vfiprintf_r+0x19a>
 8003e9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e9e:	07d9      	lsls	r1, r3, #31
 8003ea0:	d405      	bmi.n	8003eae <_vfiprintf_r+0x1fe>
 8003ea2:	89ab      	ldrh	r3, [r5, #12]
 8003ea4:	059a      	lsls	r2, r3, #22
 8003ea6:	d402      	bmi.n	8003eae <_vfiprintf_r+0x1fe>
 8003ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003eaa:	f7ff fddd 	bl	8003a68 <__retarget_lock_release_recursive>
 8003eae:	89ab      	ldrh	r3, [r5, #12]
 8003eb0:	065b      	lsls	r3, r3, #25
 8003eb2:	f53f af1f 	bmi.w	8003cf4 <_vfiprintf_r+0x44>
 8003eb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003eb8:	e71e      	b.n	8003cf8 <_vfiprintf_r+0x48>
 8003eba:	ab03      	add	r3, sp, #12
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	462a      	mov	r2, r5
 8003ec0:	4b05      	ldr	r3, [pc, #20]	@ (8003ed8 <_vfiprintf_r+0x228>)
 8003ec2:	a904      	add	r1, sp, #16
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	f000 f879 	bl	8003fbc <_printf_i>
 8003eca:	e7e4      	b.n	8003e96 <_vfiprintf_r+0x1e6>
 8003ecc:	080045e4 	.word	0x080045e4
 8003ed0:	080045ee 	.word	0x080045ee
 8003ed4:	00000000 	.word	0x00000000
 8003ed8:	08003c8b 	.word	0x08003c8b
 8003edc:	080045ea 	.word	0x080045ea

08003ee0 <_printf_common>:
 8003ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee4:	4616      	mov	r6, r2
 8003ee6:	4698      	mov	r8, r3
 8003ee8:	688a      	ldr	r2, [r1, #8]
 8003eea:	690b      	ldr	r3, [r1, #16]
 8003eec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	bfb8      	it	lt
 8003ef4:	4613      	movlt	r3, r2
 8003ef6:	6033      	str	r3, [r6, #0]
 8003ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003efc:	4607      	mov	r7, r0
 8003efe:	460c      	mov	r4, r1
 8003f00:	b10a      	cbz	r2, 8003f06 <_printf_common+0x26>
 8003f02:	3301      	adds	r3, #1
 8003f04:	6033      	str	r3, [r6, #0]
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	0699      	lsls	r1, r3, #26
 8003f0a:	bf42      	ittt	mi
 8003f0c:	6833      	ldrmi	r3, [r6, #0]
 8003f0e:	3302      	addmi	r3, #2
 8003f10:	6033      	strmi	r3, [r6, #0]
 8003f12:	6825      	ldr	r5, [r4, #0]
 8003f14:	f015 0506 	ands.w	r5, r5, #6
 8003f18:	d106      	bne.n	8003f28 <_printf_common+0x48>
 8003f1a:	f104 0a19 	add.w	sl, r4, #25
 8003f1e:	68e3      	ldr	r3, [r4, #12]
 8003f20:	6832      	ldr	r2, [r6, #0]
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	42ab      	cmp	r3, r5
 8003f26:	dc26      	bgt.n	8003f76 <_printf_common+0x96>
 8003f28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f2c:	6822      	ldr	r2, [r4, #0]
 8003f2e:	3b00      	subs	r3, #0
 8003f30:	bf18      	it	ne
 8003f32:	2301      	movne	r3, #1
 8003f34:	0692      	lsls	r2, r2, #26
 8003f36:	d42b      	bmi.n	8003f90 <_printf_common+0xb0>
 8003f38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	4638      	mov	r0, r7
 8003f40:	47c8      	blx	r9
 8003f42:	3001      	adds	r0, #1
 8003f44:	d01e      	beq.n	8003f84 <_printf_common+0xa4>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	6922      	ldr	r2, [r4, #16]
 8003f4a:	f003 0306 	and.w	r3, r3, #6
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	bf02      	ittt	eq
 8003f52:	68e5      	ldreq	r5, [r4, #12]
 8003f54:	6833      	ldreq	r3, [r6, #0]
 8003f56:	1aed      	subeq	r5, r5, r3
 8003f58:	68a3      	ldr	r3, [r4, #8]
 8003f5a:	bf0c      	ite	eq
 8003f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f60:	2500      	movne	r5, #0
 8003f62:	4293      	cmp	r3, r2
 8003f64:	bfc4      	itt	gt
 8003f66:	1a9b      	subgt	r3, r3, r2
 8003f68:	18ed      	addgt	r5, r5, r3
 8003f6a:	2600      	movs	r6, #0
 8003f6c:	341a      	adds	r4, #26
 8003f6e:	42b5      	cmp	r5, r6
 8003f70:	d11a      	bne.n	8003fa8 <_printf_common+0xc8>
 8003f72:	2000      	movs	r0, #0
 8003f74:	e008      	b.n	8003f88 <_printf_common+0xa8>
 8003f76:	2301      	movs	r3, #1
 8003f78:	4652      	mov	r2, sl
 8003f7a:	4641      	mov	r1, r8
 8003f7c:	4638      	mov	r0, r7
 8003f7e:	47c8      	blx	r9
 8003f80:	3001      	adds	r0, #1
 8003f82:	d103      	bne.n	8003f8c <_printf_common+0xac>
 8003f84:	f04f 30ff 	mov.w	r0, #4294967295
 8003f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f8c:	3501      	adds	r5, #1
 8003f8e:	e7c6      	b.n	8003f1e <_printf_common+0x3e>
 8003f90:	18e1      	adds	r1, r4, r3
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	2030      	movs	r0, #48	@ 0x30
 8003f96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f9a:	4422      	add	r2, r4
 8003f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fa0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fa4:	3302      	adds	r3, #2
 8003fa6:	e7c7      	b.n	8003f38 <_printf_common+0x58>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	4622      	mov	r2, r4
 8003fac:	4641      	mov	r1, r8
 8003fae:	4638      	mov	r0, r7
 8003fb0:	47c8      	blx	r9
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	d0e6      	beq.n	8003f84 <_printf_common+0xa4>
 8003fb6:	3601      	adds	r6, #1
 8003fb8:	e7d9      	b.n	8003f6e <_printf_common+0x8e>
	...

08003fbc <_printf_i>:
 8003fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc0:	7e0f      	ldrb	r7, [r1, #24]
 8003fc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003fc4:	2f78      	cmp	r7, #120	@ 0x78
 8003fc6:	4691      	mov	r9, r2
 8003fc8:	4680      	mov	r8, r0
 8003fca:	460c      	mov	r4, r1
 8003fcc:	469a      	mov	sl, r3
 8003fce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003fd2:	d807      	bhi.n	8003fe4 <_printf_i+0x28>
 8003fd4:	2f62      	cmp	r7, #98	@ 0x62
 8003fd6:	d80a      	bhi.n	8003fee <_printf_i+0x32>
 8003fd8:	2f00      	cmp	r7, #0
 8003fda:	f000 80d1 	beq.w	8004180 <_printf_i+0x1c4>
 8003fde:	2f58      	cmp	r7, #88	@ 0x58
 8003fe0:	f000 80b8 	beq.w	8004154 <_printf_i+0x198>
 8003fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fe8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003fec:	e03a      	b.n	8004064 <_printf_i+0xa8>
 8003fee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ff2:	2b15      	cmp	r3, #21
 8003ff4:	d8f6      	bhi.n	8003fe4 <_printf_i+0x28>
 8003ff6:	a101      	add	r1, pc, #4	@ (adr r1, 8003ffc <_printf_i+0x40>)
 8003ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ffc:	08004055 	.word	0x08004055
 8004000:	08004069 	.word	0x08004069
 8004004:	08003fe5 	.word	0x08003fe5
 8004008:	08003fe5 	.word	0x08003fe5
 800400c:	08003fe5 	.word	0x08003fe5
 8004010:	08003fe5 	.word	0x08003fe5
 8004014:	08004069 	.word	0x08004069
 8004018:	08003fe5 	.word	0x08003fe5
 800401c:	08003fe5 	.word	0x08003fe5
 8004020:	08003fe5 	.word	0x08003fe5
 8004024:	08003fe5 	.word	0x08003fe5
 8004028:	08004167 	.word	0x08004167
 800402c:	08004093 	.word	0x08004093
 8004030:	08004121 	.word	0x08004121
 8004034:	08003fe5 	.word	0x08003fe5
 8004038:	08003fe5 	.word	0x08003fe5
 800403c:	08004189 	.word	0x08004189
 8004040:	08003fe5 	.word	0x08003fe5
 8004044:	08004093 	.word	0x08004093
 8004048:	08003fe5 	.word	0x08003fe5
 800404c:	08003fe5 	.word	0x08003fe5
 8004050:	08004129 	.word	0x08004129
 8004054:	6833      	ldr	r3, [r6, #0]
 8004056:	1d1a      	adds	r2, r3, #4
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6032      	str	r2, [r6, #0]
 800405c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004060:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004064:	2301      	movs	r3, #1
 8004066:	e09c      	b.n	80041a2 <_printf_i+0x1e6>
 8004068:	6833      	ldr	r3, [r6, #0]
 800406a:	6820      	ldr	r0, [r4, #0]
 800406c:	1d19      	adds	r1, r3, #4
 800406e:	6031      	str	r1, [r6, #0]
 8004070:	0606      	lsls	r6, r0, #24
 8004072:	d501      	bpl.n	8004078 <_printf_i+0xbc>
 8004074:	681d      	ldr	r5, [r3, #0]
 8004076:	e003      	b.n	8004080 <_printf_i+0xc4>
 8004078:	0645      	lsls	r5, r0, #25
 800407a:	d5fb      	bpl.n	8004074 <_printf_i+0xb8>
 800407c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004080:	2d00      	cmp	r5, #0
 8004082:	da03      	bge.n	800408c <_printf_i+0xd0>
 8004084:	232d      	movs	r3, #45	@ 0x2d
 8004086:	426d      	negs	r5, r5
 8004088:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800408c:	4858      	ldr	r0, [pc, #352]	@ (80041f0 <_printf_i+0x234>)
 800408e:	230a      	movs	r3, #10
 8004090:	e011      	b.n	80040b6 <_printf_i+0xfa>
 8004092:	6821      	ldr	r1, [r4, #0]
 8004094:	6833      	ldr	r3, [r6, #0]
 8004096:	0608      	lsls	r0, r1, #24
 8004098:	f853 5b04 	ldr.w	r5, [r3], #4
 800409c:	d402      	bmi.n	80040a4 <_printf_i+0xe8>
 800409e:	0649      	lsls	r1, r1, #25
 80040a0:	bf48      	it	mi
 80040a2:	b2ad      	uxthmi	r5, r5
 80040a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80040a6:	4852      	ldr	r0, [pc, #328]	@ (80041f0 <_printf_i+0x234>)
 80040a8:	6033      	str	r3, [r6, #0]
 80040aa:	bf14      	ite	ne
 80040ac:	230a      	movne	r3, #10
 80040ae:	2308      	moveq	r3, #8
 80040b0:	2100      	movs	r1, #0
 80040b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040b6:	6866      	ldr	r6, [r4, #4]
 80040b8:	60a6      	str	r6, [r4, #8]
 80040ba:	2e00      	cmp	r6, #0
 80040bc:	db05      	blt.n	80040ca <_printf_i+0x10e>
 80040be:	6821      	ldr	r1, [r4, #0]
 80040c0:	432e      	orrs	r6, r5
 80040c2:	f021 0104 	bic.w	r1, r1, #4
 80040c6:	6021      	str	r1, [r4, #0]
 80040c8:	d04b      	beq.n	8004162 <_printf_i+0x1a6>
 80040ca:	4616      	mov	r6, r2
 80040cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80040d0:	fb03 5711 	mls	r7, r3, r1, r5
 80040d4:	5dc7      	ldrb	r7, [r0, r7]
 80040d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040da:	462f      	mov	r7, r5
 80040dc:	42bb      	cmp	r3, r7
 80040de:	460d      	mov	r5, r1
 80040e0:	d9f4      	bls.n	80040cc <_printf_i+0x110>
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d10b      	bne.n	80040fe <_printf_i+0x142>
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	07df      	lsls	r7, r3, #31
 80040ea:	d508      	bpl.n	80040fe <_printf_i+0x142>
 80040ec:	6923      	ldr	r3, [r4, #16]
 80040ee:	6861      	ldr	r1, [r4, #4]
 80040f0:	4299      	cmp	r1, r3
 80040f2:	bfde      	ittt	le
 80040f4:	2330      	movle	r3, #48	@ 0x30
 80040f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040fe:	1b92      	subs	r2, r2, r6
 8004100:	6122      	str	r2, [r4, #16]
 8004102:	f8cd a000 	str.w	sl, [sp]
 8004106:	464b      	mov	r3, r9
 8004108:	aa03      	add	r2, sp, #12
 800410a:	4621      	mov	r1, r4
 800410c:	4640      	mov	r0, r8
 800410e:	f7ff fee7 	bl	8003ee0 <_printf_common>
 8004112:	3001      	adds	r0, #1
 8004114:	d14a      	bne.n	80041ac <_printf_i+0x1f0>
 8004116:	f04f 30ff 	mov.w	r0, #4294967295
 800411a:	b004      	add	sp, #16
 800411c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	f043 0320 	orr.w	r3, r3, #32
 8004126:	6023      	str	r3, [r4, #0]
 8004128:	4832      	ldr	r0, [pc, #200]	@ (80041f4 <_printf_i+0x238>)
 800412a:	2778      	movs	r7, #120	@ 0x78
 800412c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	6831      	ldr	r1, [r6, #0]
 8004134:	061f      	lsls	r7, r3, #24
 8004136:	f851 5b04 	ldr.w	r5, [r1], #4
 800413a:	d402      	bmi.n	8004142 <_printf_i+0x186>
 800413c:	065f      	lsls	r7, r3, #25
 800413e:	bf48      	it	mi
 8004140:	b2ad      	uxthmi	r5, r5
 8004142:	6031      	str	r1, [r6, #0]
 8004144:	07d9      	lsls	r1, r3, #31
 8004146:	bf44      	itt	mi
 8004148:	f043 0320 	orrmi.w	r3, r3, #32
 800414c:	6023      	strmi	r3, [r4, #0]
 800414e:	b11d      	cbz	r5, 8004158 <_printf_i+0x19c>
 8004150:	2310      	movs	r3, #16
 8004152:	e7ad      	b.n	80040b0 <_printf_i+0xf4>
 8004154:	4826      	ldr	r0, [pc, #152]	@ (80041f0 <_printf_i+0x234>)
 8004156:	e7e9      	b.n	800412c <_printf_i+0x170>
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	f023 0320 	bic.w	r3, r3, #32
 800415e:	6023      	str	r3, [r4, #0]
 8004160:	e7f6      	b.n	8004150 <_printf_i+0x194>
 8004162:	4616      	mov	r6, r2
 8004164:	e7bd      	b.n	80040e2 <_printf_i+0x126>
 8004166:	6833      	ldr	r3, [r6, #0]
 8004168:	6825      	ldr	r5, [r4, #0]
 800416a:	6961      	ldr	r1, [r4, #20]
 800416c:	1d18      	adds	r0, r3, #4
 800416e:	6030      	str	r0, [r6, #0]
 8004170:	062e      	lsls	r6, r5, #24
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	d501      	bpl.n	800417a <_printf_i+0x1be>
 8004176:	6019      	str	r1, [r3, #0]
 8004178:	e002      	b.n	8004180 <_printf_i+0x1c4>
 800417a:	0668      	lsls	r0, r5, #25
 800417c:	d5fb      	bpl.n	8004176 <_printf_i+0x1ba>
 800417e:	8019      	strh	r1, [r3, #0]
 8004180:	2300      	movs	r3, #0
 8004182:	6123      	str	r3, [r4, #16]
 8004184:	4616      	mov	r6, r2
 8004186:	e7bc      	b.n	8004102 <_printf_i+0x146>
 8004188:	6833      	ldr	r3, [r6, #0]
 800418a:	1d1a      	adds	r2, r3, #4
 800418c:	6032      	str	r2, [r6, #0]
 800418e:	681e      	ldr	r6, [r3, #0]
 8004190:	6862      	ldr	r2, [r4, #4]
 8004192:	2100      	movs	r1, #0
 8004194:	4630      	mov	r0, r6
 8004196:	f7fc f823 	bl	80001e0 <memchr>
 800419a:	b108      	cbz	r0, 80041a0 <_printf_i+0x1e4>
 800419c:	1b80      	subs	r0, r0, r6
 800419e:	6060      	str	r0, [r4, #4]
 80041a0:	6863      	ldr	r3, [r4, #4]
 80041a2:	6123      	str	r3, [r4, #16]
 80041a4:	2300      	movs	r3, #0
 80041a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041aa:	e7aa      	b.n	8004102 <_printf_i+0x146>
 80041ac:	6923      	ldr	r3, [r4, #16]
 80041ae:	4632      	mov	r2, r6
 80041b0:	4649      	mov	r1, r9
 80041b2:	4640      	mov	r0, r8
 80041b4:	47d0      	blx	sl
 80041b6:	3001      	adds	r0, #1
 80041b8:	d0ad      	beq.n	8004116 <_printf_i+0x15a>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	079b      	lsls	r3, r3, #30
 80041be:	d413      	bmi.n	80041e8 <_printf_i+0x22c>
 80041c0:	68e0      	ldr	r0, [r4, #12]
 80041c2:	9b03      	ldr	r3, [sp, #12]
 80041c4:	4298      	cmp	r0, r3
 80041c6:	bfb8      	it	lt
 80041c8:	4618      	movlt	r0, r3
 80041ca:	e7a6      	b.n	800411a <_printf_i+0x15e>
 80041cc:	2301      	movs	r3, #1
 80041ce:	4632      	mov	r2, r6
 80041d0:	4649      	mov	r1, r9
 80041d2:	4640      	mov	r0, r8
 80041d4:	47d0      	blx	sl
 80041d6:	3001      	adds	r0, #1
 80041d8:	d09d      	beq.n	8004116 <_printf_i+0x15a>
 80041da:	3501      	adds	r5, #1
 80041dc:	68e3      	ldr	r3, [r4, #12]
 80041de:	9903      	ldr	r1, [sp, #12]
 80041e0:	1a5b      	subs	r3, r3, r1
 80041e2:	42ab      	cmp	r3, r5
 80041e4:	dcf2      	bgt.n	80041cc <_printf_i+0x210>
 80041e6:	e7eb      	b.n	80041c0 <_printf_i+0x204>
 80041e8:	2500      	movs	r5, #0
 80041ea:	f104 0619 	add.w	r6, r4, #25
 80041ee:	e7f5      	b.n	80041dc <_printf_i+0x220>
 80041f0:	080045f5 	.word	0x080045f5
 80041f4:	08004606 	.word	0x08004606

080041f8 <__sflush_r>:
 80041f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004200:	0716      	lsls	r6, r2, #28
 8004202:	4605      	mov	r5, r0
 8004204:	460c      	mov	r4, r1
 8004206:	d454      	bmi.n	80042b2 <__sflush_r+0xba>
 8004208:	684b      	ldr	r3, [r1, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	dc02      	bgt.n	8004214 <__sflush_r+0x1c>
 800420e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	dd48      	ble.n	80042a6 <__sflush_r+0xae>
 8004214:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004216:	2e00      	cmp	r6, #0
 8004218:	d045      	beq.n	80042a6 <__sflush_r+0xae>
 800421a:	2300      	movs	r3, #0
 800421c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004220:	682f      	ldr	r7, [r5, #0]
 8004222:	6a21      	ldr	r1, [r4, #32]
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	d030      	beq.n	800428a <__sflush_r+0x92>
 8004228:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800422a:	89a3      	ldrh	r3, [r4, #12]
 800422c:	0759      	lsls	r1, r3, #29
 800422e:	d505      	bpl.n	800423c <__sflush_r+0x44>
 8004230:	6863      	ldr	r3, [r4, #4]
 8004232:	1ad2      	subs	r2, r2, r3
 8004234:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004236:	b10b      	cbz	r3, 800423c <__sflush_r+0x44>
 8004238:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800423a:	1ad2      	subs	r2, r2, r3
 800423c:	2300      	movs	r3, #0
 800423e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004240:	6a21      	ldr	r1, [r4, #32]
 8004242:	4628      	mov	r0, r5
 8004244:	47b0      	blx	r6
 8004246:	1c43      	adds	r3, r0, #1
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	d106      	bne.n	800425a <__sflush_r+0x62>
 800424c:	6829      	ldr	r1, [r5, #0]
 800424e:	291d      	cmp	r1, #29
 8004250:	d82b      	bhi.n	80042aa <__sflush_r+0xb2>
 8004252:	4a2a      	ldr	r2, [pc, #168]	@ (80042fc <__sflush_r+0x104>)
 8004254:	40ca      	lsrs	r2, r1
 8004256:	07d6      	lsls	r6, r2, #31
 8004258:	d527      	bpl.n	80042aa <__sflush_r+0xb2>
 800425a:	2200      	movs	r2, #0
 800425c:	6062      	str	r2, [r4, #4]
 800425e:	04d9      	lsls	r1, r3, #19
 8004260:	6922      	ldr	r2, [r4, #16]
 8004262:	6022      	str	r2, [r4, #0]
 8004264:	d504      	bpl.n	8004270 <__sflush_r+0x78>
 8004266:	1c42      	adds	r2, r0, #1
 8004268:	d101      	bne.n	800426e <__sflush_r+0x76>
 800426a:	682b      	ldr	r3, [r5, #0]
 800426c:	b903      	cbnz	r3, 8004270 <__sflush_r+0x78>
 800426e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004272:	602f      	str	r7, [r5, #0]
 8004274:	b1b9      	cbz	r1, 80042a6 <__sflush_r+0xae>
 8004276:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800427a:	4299      	cmp	r1, r3
 800427c:	d002      	beq.n	8004284 <__sflush_r+0x8c>
 800427e:	4628      	mov	r0, r5
 8004280:	f7ff fbf4 	bl	8003a6c <_free_r>
 8004284:	2300      	movs	r3, #0
 8004286:	6363      	str	r3, [r4, #52]	@ 0x34
 8004288:	e00d      	b.n	80042a6 <__sflush_r+0xae>
 800428a:	2301      	movs	r3, #1
 800428c:	4628      	mov	r0, r5
 800428e:	47b0      	blx	r6
 8004290:	4602      	mov	r2, r0
 8004292:	1c50      	adds	r0, r2, #1
 8004294:	d1c9      	bne.n	800422a <__sflush_r+0x32>
 8004296:	682b      	ldr	r3, [r5, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0c6      	beq.n	800422a <__sflush_r+0x32>
 800429c:	2b1d      	cmp	r3, #29
 800429e:	d001      	beq.n	80042a4 <__sflush_r+0xac>
 80042a0:	2b16      	cmp	r3, #22
 80042a2:	d11e      	bne.n	80042e2 <__sflush_r+0xea>
 80042a4:	602f      	str	r7, [r5, #0]
 80042a6:	2000      	movs	r0, #0
 80042a8:	e022      	b.n	80042f0 <__sflush_r+0xf8>
 80042aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042ae:	b21b      	sxth	r3, r3
 80042b0:	e01b      	b.n	80042ea <__sflush_r+0xf2>
 80042b2:	690f      	ldr	r7, [r1, #16]
 80042b4:	2f00      	cmp	r7, #0
 80042b6:	d0f6      	beq.n	80042a6 <__sflush_r+0xae>
 80042b8:	0793      	lsls	r3, r2, #30
 80042ba:	680e      	ldr	r6, [r1, #0]
 80042bc:	bf08      	it	eq
 80042be:	694b      	ldreq	r3, [r1, #20]
 80042c0:	600f      	str	r7, [r1, #0]
 80042c2:	bf18      	it	ne
 80042c4:	2300      	movne	r3, #0
 80042c6:	eba6 0807 	sub.w	r8, r6, r7
 80042ca:	608b      	str	r3, [r1, #8]
 80042cc:	f1b8 0f00 	cmp.w	r8, #0
 80042d0:	dde9      	ble.n	80042a6 <__sflush_r+0xae>
 80042d2:	6a21      	ldr	r1, [r4, #32]
 80042d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80042d6:	4643      	mov	r3, r8
 80042d8:	463a      	mov	r2, r7
 80042da:	4628      	mov	r0, r5
 80042dc:	47b0      	blx	r6
 80042de:	2800      	cmp	r0, #0
 80042e0:	dc08      	bgt.n	80042f4 <__sflush_r+0xfc>
 80042e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042ea:	81a3      	strh	r3, [r4, #12]
 80042ec:	f04f 30ff 	mov.w	r0, #4294967295
 80042f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f4:	4407      	add	r7, r0
 80042f6:	eba8 0800 	sub.w	r8, r8, r0
 80042fa:	e7e7      	b.n	80042cc <__sflush_r+0xd4>
 80042fc:	20400001 	.word	0x20400001

08004300 <_fflush_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	690b      	ldr	r3, [r1, #16]
 8004304:	4605      	mov	r5, r0
 8004306:	460c      	mov	r4, r1
 8004308:	b913      	cbnz	r3, 8004310 <_fflush_r+0x10>
 800430a:	2500      	movs	r5, #0
 800430c:	4628      	mov	r0, r5
 800430e:	bd38      	pop	{r3, r4, r5, pc}
 8004310:	b118      	cbz	r0, 800431a <_fflush_r+0x1a>
 8004312:	6a03      	ldr	r3, [r0, #32]
 8004314:	b90b      	cbnz	r3, 800431a <_fflush_r+0x1a>
 8004316:	f7ff faa1 	bl	800385c <__sinit>
 800431a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f3      	beq.n	800430a <_fflush_r+0xa>
 8004322:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004324:	07d0      	lsls	r0, r2, #31
 8004326:	d404      	bmi.n	8004332 <_fflush_r+0x32>
 8004328:	0599      	lsls	r1, r3, #22
 800432a:	d402      	bmi.n	8004332 <_fflush_r+0x32>
 800432c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800432e:	f7ff fb9a 	bl	8003a66 <__retarget_lock_acquire_recursive>
 8004332:	4628      	mov	r0, r5
 8004334:	4621      	mov	r1, r4
 8004336:	f7ff ff5f 	bl	80041f8 <__sflush_r>
 800433a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800433c:	07da      	lsls	r2, r3, #31
 800433e:	4605      	mov	r5, r0
 8004340:	d4e4      	bmi.n	800430c <_fflush_r+0xc>
 8004342:	89a3      	ldrh	r3, [r4, #12]
 8004344:	059b      	lsls	r3, r3, #22
 8004346:	d4e1      	bmi.n	800430c <_fflush_r+0xc>
 8004348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800434a:	f7ff fb8d 	bl	8003a68 <__retarget_lock_release_recursive>
 800434e:	e7dd      	b.n	800430c <_fflush_r+0xc>

08004350 <__swbuf_r>:
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004352:	460e      	mov	r6, r1
 8004354:	4614      	mov	r4, r2
 8004356:	4605      	mov	r5, r0
 8004358:	b118      	cbz	r0, 8004362 <__swbuf_r+0x12>
 800435a:	6a03      	ldr	r3, [r0, #32]
 800435c:	b90b      	cbnz	r3, 8004362 <__swbuf_r+0x12>
 800435e:	f7ff fa7d 	bl	800385c <__sinit>
 8004362:	69a3      	ldr	r3, [r4, #24]
 8004364:	60a3      	str	r3, [r4, #8]
 8004366:	89a3      	ldrh	r3, [r4, #12]
 8004368:	071a      	lsls	r2, r3, #28
 800436a:	d501      	bpl.n	8004370 <__swbuf_r+0x20>
 800436c:	6923      	ldr	r3, [r4, #16]
 800436e:	b943      	cbnz	r3, 8004382 <__swbuf_r+0x32>
 8004370:	4621      	mov	r1, r4
 8004372:	4628      	mov	r0, r5
 8004374:	f000 f82a 	bl	80043cc <__swsetup_r>
 8004378:	b118      	cbz	r0, 8004382 <__swbuf_r+0x32>
 800437a:	f04f 37ff 	mov.w	r7, #4294967295
 800437e:	4638      	mov	r0, r7
 8004380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	6922      	ldr	r2, [r4, #16]
 8004386:	1a98      	subs	r0, r3, r2
 8004388:	6963      	ldr	r3, [r4, #20]
 800438a:	b2f6      	uxtb	r6, r6
 800438c:	4283      	cmp	r3, r0
 800438e:	4637      	mov	r7, r6
 8004390:	dc05      	bgt.n	800439e <__swbuf_r+0x4e>
 8004392:	4621      	mov	r1, r4
 8004394:	4628      	mov	r0, r5
 8004396:	f7ff ffb3 	bl	8004300 <_fflush_r>
 800439a:	2800      	cmp	r0, #0
 800439c:	d1ed      	bne.n	800437a <__swbuf_r+0x2a>
 800439e:	68a3      	ldr	r3, [r4, #8]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	60a3      	str	r3, [r4, #8]
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	6022      	str	r2, [r4, #0]
 80043aa:	701e      	strb	r6, [r3, #0]
 80043ac:	6962      	ldr	r2, [r4, #20]
 80043ae:	1c43      	adds	r3, r0, #1
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d004      	beq.n	80043be <__swbuf_r+0x6e>
 80043b4:	89a3      	ldrh	r3, [r4, #12]
 80043b6:	07db      	lsls	r3, r3, #31
 80043b8:	d5e1      	bpl.n	800437e <__swbuf_r+0x2e>
 80043ba:	2e0a      	cmp	r6, #10
 80043bc:	d1df      	bne.n	800437e <__swbuf_r+0x2e>
 80043be:	4621      	mov	r1, r4
 80043c0:	4628      	mov	r0, r5
 80043c2:	f7ff ff9d 	bl	8004300 <_fflush_r>
 80043c6:	2800      	cmp	r0, #0
 80043c8:	d0d9      	beq.n	800437e <__swbuf_r+0x2e>
 80043ca:	e7d6      	b.n	800437a <__swbuf_r+0x2a>

080043cc <__swsetup_r>:
 80043cc:	b538      	push	{r3, r4, r5, lr}
 80043ce:	4b29      	ldr	r3, [pc, #164]	@ (8004474 <__swsetup_r+0xa8>)
 80043d0:	4605      	mov	r5, r0
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	460c      	mov	r4, r1
 80043d6:	b118      	cbz	r0, 80043e0 <__swsetup_r+0x14>
 80043d8:	6a03      	ldr	r3, [r0, #32]
 80043da:	b90b      	cbnz	r3, 80043e0 <__swsetup_r+0x14>
 80043dc:	f7ff fa3e 	bl	800385c <__sinit>
 80043e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043e4:	0719      	lsls	r1, r3, #28
 80043e6:	d422      	bmi.n	800442e <__swsetup_r+0x62>
 80043e8:	06da      	lsls	r2, r3, #27
 80043ea:	d407      	bmi.n	80043fc <__swsetup_r+0x30>
 80043ec:	2209      	movs	r2, #9
 80043ee:	602a      	str	r2, [r5, #0]
 80043f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043f4:	81a3      	strh	r3, [r4, #12]
 80043f6:	f04f 30ff 	mov.w	r0, #4294967295
 80043fa:	e033      	b.n	8004464 <__swsetup_r+0x98>
 80043fc:	0758      	lsls	r0, r3, #29
 80043fe:	d512      	bpl.n	8004426 <__swsetup_r+0x5a>
 8004400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004402:	b141      	cbz	r1, 8004416 <__swsetup_r+0x4a>
 8004404:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004408:	4299      	cmp	r1, r3
 800440a:	d002      	beq.n	8004412 <__swsetup_r+0x46>
 800440c:	4628      	mov	r0, r5
 800440e:	f7ff fb2d 	bl	8003a6c <_free_r>
 8004412:	2300      	movs	r3, #0
 8004414:	6363      	str	r3, [r4, #52]	@ 0x34
 8004416:	89a3      	ldrh	r3, [r4, #12]
 8004418:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800441c:	81a3      	strh	r3, [r4, #12]
 800441e:	2300      	movs	r3, #0
 8004420:	6063      	str	r3, [r4, #4]
 8004422:	6923      	ldr	r3, [r4, #16]
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	89a3      	ldrh	r3, [r4, #12]
 8004428:	f043 0308 	orr.w	r3, r3, #8
 800442c:	81a3      	strh	r3, [r4, #12]
 800442e:	6923      	ldr	r3, [r4, #16]
 8004430:	b94b      	cbnz	r3, 8004446 <__swsetup_r+0x7a>
 8004432:	89a3      	ldrh	r3, [r4, #12]
 8004434:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800443c:	d003      	beq.n	8004446 <__swsetup_r+0x7a>
 800443e:	4621      	mov	r1, r4
 8004440:	4628      	mov	r0, r5
 8004442:	f000 f84f 	bl	80044e4 <__smakebuf_r>
 8004446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800444a:	f013 0201 	ands.w	r2, r3, #1
 800444e:	d00a      	beq.n	8004466 <__swsetup_r+0x9a>
 8004450:	2200      	movs	r2, #0
 8004452:	60a2      	str	r2, [r4, #8]
 8004454:	6962      	ldr	r2, [r4, #20]
 8004456:	4252      	negs	r2, r2
 8004458:	61a2      	str	r2, [r4, #24]
 800445a:	6922      	ldr	r2, [r4, #16]
 800445c:	b942      	cbnz	r2, 8004470 <__swsetup_r+0xa4>
 800445e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004462:	d1c5      	bne.n	80043f0 <__swsetup_r+0x24>
 8004464:	bd38      	pop	{r3, r4, r5, pc}
 8004466:	0799      	lsls	r1, r3, #30
 8004468:	bf58      	it	pl
 800446a:	6962      	ldrpl	r2, [r4, #20]
 800446c:	60a2      	str	r2, [r4, #8]
 800446e:	e7f4      	b.n	800445a <__swsetup_r+0x8e>
 8004470:	2000      	movs	r0, #0
 8004472:	e7f7      	b.n	8004464 <__swsetup_r+0x98>
 8004474:	20000018 	.word	0x20000018

08004478 <_sbrk_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	4d06      	ldr	r5, [pc, #24]	@ (8004494 <_sbrk_r+0x1c>)
 800447c:	2300      	movs	r3, #0
 800447e:	4604      	mov	r4, r0
 8004480:	4608      	mov	r0, r1
 8004482:	602b      	str	r3, [r5, #0]
 8004484:	f7fc fdb0 	bl	8000fe8 <_sbrk>
 8004488:	1c43      	adds	r3, r0, #1
 800448a:	d102      	bne.n	8004492 <_sbrk_r+0x1a>
 800448c:	682b      	ldr	r3, [r5, #0]
 800448e:	b103      	cbz	r3, 8004492 <_sbrk_r+0x1a>
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	bd38      	pop	{r3, r4, r5, pc}
 8004494:	2000027c 	.word	0x2000027c

08004498 <__swhatbuf_r>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	460c      	mov	r4, r1
 800449c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a0:	2900      	cmp	r1, #0
 80044a2:	b096      	sub	sp, #88	@ 0x58
 80044a4:	4615      	mov	r5, r2
 80044a6:	461e      	mov	r6, r3
 80044a8:	da0d      	bge.n	80044c6 <__swhatbuf_r+0x2e>
 80044aa:	89a3      	ldrh	r3, [r4, #12]
 80044ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80044b0:	f04f 0100 	mov.w	r1, #0
 80044b4:	bf14      	ite	ne
 80044b6:	2340      	movne	r3, #64	@ 0x40
 80044b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80044bc:	2000      	movs	r0, #0
 80044be:	6031      	str	r1, [r6, #0]
 80044c0:	602b      	str	r3, [r5, #0]
 80044c2:	b016      	add	sp, #88	@ 0x58
 80044c4:	bd70      	pop	{r4, r5, r6, pc}
 80044c6:	466a      	mov	r2, sp
 80044c8:	f000 f848 	bl	800455c <_fstat_r>
 80044cc:	2800      	cmp	r0, #0
 80044ce:	dbec      	blt.n	80044aa <__swhatbuf_r+0x12>
 80044d0:	9901      	ldr	r1, [sp, #4]
 80044d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80044d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80044da:	4259      	negs	r1, r3
 80044dc:	4159      	adcs	r1, r3
 80044de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044e2:	e7eb      	b.n	80044bc <__swhatbuf_r+0x24>

080044e4 <__smakebuf_r>:
 80044e4:	898b      	ldrh	r3, [r1, #12]
 80044e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044e8:	079d      	lsls	r5, r3, #30
 80044ea:	4606      	mov	r6, r0
 80044ec:	460c      	mov	r4, r1
 80044ee:	d507      	bpl.n	8004500 <__smakebuf_r+0x1c>
 80044f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80044f4:	6023      	str	r3, [r4, #0]
 80044f6:	6123      	str	r3, [r4, #16]
 80044f8:	2301      	movs	r3, #1
 80044fa:	6163      	str	r3, [r4, #20]
 80044fc:	b003      	add	sp, #12
 80044fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004500:	ab01      	add	r3, sp, #4
 8004502:	466a      	mov	r2, sp
 8004504:	f7ff ffc8 	bl	8004498 <__swhatbuf_r>
 8004508:	9f00      	ldr	r7, [sp, #0]
 800450a:	4605      	mov	r5, r0
 800450c:	4639      	mov	r1, r7
 800450e:	4630      	mov	r0, r6
 8004510:	f7ff fb18 	bl	8003b44 <_malloc_r>
 8004514:	b948      	cbnz	r0, 800452a <__smakebuf_r+0x46>
 8004516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800451a:	059a      	lsls	r2, r3, #22
 800451c:	d4ee      	bmi.n	80044fc <__smakebuf_r+0x18>
 800451e:	f023 0303 	bic.w	r3, r3, #3
 8004522:	f043 0302 	orr.w	r3, r3, #2
 8004526:	81a3      	strh	r3, [r4, #12]
 8004528:	e7e2      	b.n	80044f0 <__smakebuf_r+0xc>
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	6020      	str	r0, [r4, #0]
 800452e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004532:	81a3      	strh	r3, [r4, #12]
 8004534:	9b01      	ldr	r3, [sp, #4]
 8004536:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800453a:	b15b      	cbz	r3, 8004554 <__smakebuf_r+0x70>
 800453c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004540:	4630      	mov	r0, r6
 8004542:	f000 f81d 	bl	8004580 <_isatty_r>
 8004546:	b128      	cbz	r0, 8004554 <__smakebuf_r+0x70>
 8004548:	89a3      	ldrh	r3, [r4, #12]
 800454a:	f023 0303 	bic.w	r3, r3, #3
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	81a3      	strh	r3, [r4, #12]
 8004554:	89a3      	ldrh	r3, [r4, #12]
 8004556:	431d      	orrs	r5, r3
 8004558:	81a5      	strh	r5, [r4, #12]
 800455a:	e7cf      	b.n	80044fc <__smakebuf_r+0x18>

0800455c <_fstat_r>:
 800455c:	b538      	push	{r3, r4, r5, lr}
 800455e:	4d07      	ldr	r5, [pc, #28]	@ (800457c <_fstat_r+0x20>)
 8004560:	2300      	movs	r3, #0
 8004562:	4604      	mov	r4, r0
 8004564:	4608      	mov	r0, r1
 8004566:	4611      	mov	r1, r2
 8004568:	602b      	str	r3, [r5, #0]
 800456a:	f7fc fd14 	bl	8000f96 <_fstat>
 800456e:	1c43      	adds	r3, r0, #1
 8004570:	d102      	bne.n	8004578 <_fstat_r+0x1c>
 8004572:	682b      	ldr	r3, [r5, #0]
 8004574:	b103      	cbz	r3, 8004578 <_fstat_r+0x1c>
 8004576:	6023      	str	r3, [r4, #0]
 8004578:	bd38      	pop	{r3, r4, r5, pc}
 800457a:	bf00      	nop
 800457c:	2000027c 	.word	0x2000027c

08004580 <_isatty_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4d06      	ldr	r5, [pc, #24]	@ (800459c <_isatty_r+0x1c>)
 8004584:	2300      	movs	r3, #0
 8004586:	4604      	mov	r4, r0
 8004588:	4608      	mov	r0, r1
 800458a:	602b      	str	r3, [r5, #0]
 800458c:	f7fc fd13 	bl	8000fb6 <_isatty>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d102      	bne.n	800459a <_isatty_r+0x1a>
 8004594:	682b      	ldr	r3, [r5, #0]
 8004596:	b103      	cbz	r3, 800459a <_isatty_r+0x1a>
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	bd38      	pop	{r3, r4, r5, pc}
 800459c:	2000027c 	.word	0x2000027c

080045a0 <_init>:
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	bf00      	nop
 80045a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a6:	bc08      	pop	{r3}
 80045a8:	469e      	mov	lr, r3
 80045aa:	4770      	bx	lr

080045ac <_fini>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	bf00      	nop
 80045b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b2:	bc08      	pop	{r3}
 80045b4:	469e      	mov	lr, r3
 80045b6:	4770      	bx	lr
